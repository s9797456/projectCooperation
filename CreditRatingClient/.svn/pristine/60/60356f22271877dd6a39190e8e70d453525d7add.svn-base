/**
 * 
 */
package com.credit.controller.personal;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.credit.model.enterprise.EntBaseInfo;
import com.credit.model.enterprise.EntResult;
import com.credit.model.member.Customer;
import com.credit.model.person.PerOpinion;
import com.credit.model.person.PerProcess;
import com.credit.model.person.PerResult;
import com.credit.modelvo.Permission;
import com.credit.modelvo.SessionName;
import com.credit.service.person.PerOpinionService;
import com.credit.service.person.PerProcessService;
import com.credit.service.person.PerResultService;
import com.credit.util.model.IndexRateVo;
import com.credit.util.properties.BusinessUtil;
import com.credit.util.properties.ScoreLevelDescUtil;

/**
 * 个人信用
 * @author Administrator
 */
@Controller
@RequestMapping("/initPersonal")
public class PersonalController {
	
	private static final Logger logger = Logger.getLogger(PersonalController.class);

	private String moduleName = "用户操作情况";
	
	@Resource
	private PerProcessService perProcessService; //个人信用状态
	
	@Resource
	private PerOpinionService perOpinionService;//驳回信息
	
	@Resource
	private PerResultService perResultService;//评分信息
	
	/**
	 * @Title spring mvc在绑定表单之前，会先进入该方法（从jsp -> java）本方法是str转换为date类型
	 * 		      或者使用   实体类 属性上注入方式（    @DateTimeFormat(pattern = "yyyy-MM-dd")）
	 * @author  Administrator  @date 2017-8-23 
	 * @Description 
	 */
	@InitBinder  
    public void initBinder(WebDataBinder binder) {  
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
    	dateFormat.setLenient(false);  
    	binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true)); //"true":允许输入空值，"false":不能为空值 
    }
	
	/**
	 * @Title 阅读协议
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "personal", privilegeValue = "readProtocols")
	@RequestMapping("/readProtocols")
	@ResponseBody
	public Map<String, Object> readProtocols(HttpServletRequest request){
		logger.info(moduleName + "[阅读协议]");
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if(customer != null){
			PerProcess process = perProcessService.selectByPerIDKey(customer.getPerid());
		    if(process!=null){
		    	process.setReadstate(1);
		    	perProcessService.updateByPrimaryKeySelective(process);
		    }else{
		    	process = new PerProcess();
		    	process.setReadstate(1);
		    	process.setUuid(UUID.randomUUID().toString().replace("-", ""));
		    	process.setPerid(customer.getPerid());
		    	perProcessService.insertSelective(process);
		    }
		    msgMap.put("msg", "阅读协议状态更新成功");
		}else{
			msgMap.put("msg", "网络错误，请重新登录    错误代码：204");
		}
		return msgMap;
	}
	
	/**
	 * @Title 查看驳回项
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "personal", privilegeValue = "readProtocols")
	@RequestMapping("/opinion")
	@ResponseBody
	public Map<String, Object> opinion(HttpServletRequest request){
		logger.info(moduleName + "[查看驳回项]");
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if(customer != null){
		PerOpinion perOpinion = perOpinionService.selectByPerIDReject(customer.getPerid());
			msgMap.put("opinion", perOpinion);
			msgMap.put("status", true);
		}else{
			msgMap.put("msg", "网络错误，请重新登录    错误代码：204");
			msgMap.put("status", false);
		}
		return msgMap;
	}

	/**
	 * @Title  查看初评信息
	 * @author  严树伟  @date 2017-9-13 
	 * @Description 增改查询内容
	 *
	 */
	@Permission(model = "personal", privilegeValue = "readProtocols")
	@RequestMapping("/viewPreliminary")
	public String viewScore(HttpServletRequest request)
			throws Exception {
		logger.info(moduleName + "[查看初评]");
		// 得到当前用户的相关信息
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if (customer != null) {
			String perid = customer.getPerid();
			PerProcess perProcess = perProcessService.selectByPerIDKey(perid);
			if(perProcess.getApplyreportstate() ==1 && perProcess.getScorestate() > 2){
				PerResult perResult = perResultService.selectByPerID(perid);
				PerOpinion perOpinion = perOpinionService.selectByPerIDAndScore(perid);
				
				String adr=BusinessUtil.getMsg("adr");
				String root=BusinessUtil.getMsg("root");
				adr=adr+root;
				List<IndexRateVo> indexRates = perResultService.getIndexRate(adr+perResult.getScorexmlurl());
				
				//获取等级说明
				if(perResult.getPreliminarylevel() != null){
					request.setAttribute("explain", ScoreLevelDescUtil.scoreLevelDesc(perResult.getPreliminarylevel()));
				}
				
				request.setAttribute("perResult", perResult);//评分
				request.setAttribute("perOpinion", perOpinion);//反馈
				request.setAttribute("perProcess", perProcess);//状态
				request.setAttribute("indexRates", indexRates);//一级指标得分情况
			}
			return "personal/reject";
		}else{
			request.setAttribute("error", "登录超时,请重新登录");
			return "redirect:/customer/logonUI.do";
		}
	}
	
	/**
	 * @Title  获取报告相关信息
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "personal", privilegeValue = "readProtocols")
	@RequestMapping("/downloadReport")
	@ResponseBody
	public Map<String, Object> downloadReportUI(HttpServletRequest request){
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if (customer != null) {
			String perid = customer.getPerid();
			PerResult perResult = perResultService.selectByPerID(perid);
			if(perResult != null && perResult.getReporturl() != null ){
				String path = BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+perResult.getReporturl();
				File file = new File(path);
				if(file.isFile()){
					msgMap.put("reporturl", 1);
				}else{
					msgMap.put("reporturl", 0);
				}
			}else{
				msgMap.put("reporturl", 0);
			}
			msgMap.put("perResult", perResult);
			logger.info(moduleName + "[获取当前账户报告相关信息]");
			msgMap.put("status", true);
			return msgMap;
		}else{
			msgMap.put("status", false);
			return msgMap;
		}
		
	}
	/**
	 * @Title 下载报告
	 * @author  Administrator  @date 2017-9-25 
	 * @Description 
	 *
	 */
	@Permission(model = "personal", privilegeValue = "readProtocols")
	@RequestMapping("/downLoad")
	public String downLoad(HttpServletResponse response,HttpServletRequest request,String report) {
		logger.info(moduleName + "[评分报告下载]");
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmss");
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if( customer != null){
			perid = customer.getEntid();
			EntBaseInfo ent= entBaseInfoService.selectByPrimaryKey(perid);
			EntResult entResult = entResultService.selectByEntId(perid);
			if(entResult != null && entResult.getReporturl()!=null && !"".equals(entResult.getReporturl().trim())){
				String path=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+entResult.getReporturl();
				String name=ent.getName()+"-"+sdf.format(new Date())+".pdf";
				BufferedInputStream bis = null;
				BufferedOutputStream bos = null;
				OutputStream fos = null;
				InputStream fis = null;
				// 进行下载
				try {
					fis = new FileInputStream(path);
					bis = new BufferedInputStream(fis);
					fos = response.getOutputStream();
					bos = new BufferedOutputStream(fos);
					// 这个就就是弹出下载对话框的关键代码
					/*
					 * System.out.println(name);
					 * System.out.println(URLEncoder.encode(name,"utf-8"));
					 */
					name = URLEncoder.encode(name, "utf-8");
					name = URLEncoder.encode(name, "utf-8");
					name = URLDecoder.decode(name, "utf-8");
					name = URLDecoder.decode(name, "utf-8");
					/* name = new String(name.getBytes("ISO8859-1"), "utf-8"); */
					System.out.println(name);
					name = new String(name.getBytes("gbk"), "ISO8859-1");
					System.out.println(name);
					response.setHeader("cache-control", "public");
					response.setHeader("Pragma", "public");
					response.setHeader("Content-disposition", "attachment;filename="
							+ name);
					int bytesRead = 0;
					// 都是用输入流进行先读，然后用输出流去写，唯一不同的是我用的是缓冲输入输出流
					byte[] buffer = new byte[8192];
					while ((bytesRead = bis.read(buffer, 0, 8192)) != -1) {
						bos.write(buffer, 0, bytesRead);
					}
					bos.flush();
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					if (fos != null) {
						try {
							fos.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (bis != null) {
						try {
							bis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (fis != null) {
						try {
							fis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (bos != null) {
						try {
							bos.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
		return null;
	}
}
