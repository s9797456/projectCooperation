package com.credit.controller.enterprise;


import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.credit.model.enterprise.EntBaseInfo;
import com.credit.model.enterprise.EntResult;
import com.credit.model.enterprise.Historical;
import com.credit.model.enterprise.Opinion;
import com.credit.model.enterprise.ProcessState;
import com.credit.model.member.Customer;
import com.credit.modelvo.HistoricalVO;
import com.credit.modelvo.Permission;
import com.credit.modelvo.SessionName;
import com.credit.service.addition.ModelService;
import com.credit.service.enterprise.EntBaseInfoService;
import com.credit.service.enterprise.EntResultService;
import com.credit.service.enterprise.HistoricalService;
import com.credit.service.enterprise.OpinionService;
import com.credit.service.enterprise.ProcessStateService;
import com.credit.service.member.CustomerService;
import com.credit.util.DateTime;
import com.credit.util.MD5Code;
import com.credit.util.model.IndexRateVo;
import com.credit.util.properties.BusinessUtil;
import com.credit.util.properties.ScoreLevelDescUtil;

/**
 * @title 用户 主界面
 * @author ssf   2017-7-25
 * @desc
 */
@Controller
@RequestMapping("/main")
public class MainController {


	private boolean flag = true;

	private static final Logger logger = Logger.getLogger(MainController.class);

	private String moduleName = "用户操作情况";
	
	private String entBaseInfoUuid = "";
	
	//企业状态
	@Resource
	private ProcessStateService processStateService;
	//基础信息
	@Resource
	private EntBaseInfoService entBaseInfoService;
	//评分
	@Resource
	private EntResultService entResultService;
	//意见
	@Resource
	private OpinionService opinionService;
	//登录账户信息
	@Resource
	private CustomerService<?> customerService;
	//历史记录
	@Resource
	HistoricalService historicalService;
	//模型
	@Resource
	ModelService<?> modelService;
	
	/**
	 * @Title  查看初评信息
	 * @author  严树伟  @date 2017-9-13 
	 * @Description 增改查询内容
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "preliminary")
	@RequestMapping("/viewPreliminary")
	public String viewScore(Model model, HttpServletRequest request)
			throws Exception {
		logger.info(moduleName + "[查看初评]");
		// 得到当前用户的相关信息
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		System.out.println("opinionService : "+ opinionService);
		if (customer != null) {
			String enterpriseId = customer.getEntid();
			ProcessState processState = processStateService.selectByEntBaseInfoKey(enterpriseId);
			if(processState.getApplyreportstate() ==1 && processState.getScorestate() > 2){
				EntResult result = entResultService.selectByEntId(enterpriseId);
				Opinion opinion = opinionService.selectByEntBaseInfoKey(enterpriseId, 0);
				
				String adr=BusinessUtil.getMsg("adr");
				String root=BusinessUtil.getMsg("root");
				adr=adr+root;
				List<IndexRateVo> indexRates = entResultService.getIndexRate(adr+result.getScorexmlurl());
				
				//获取等级说明
				if(result.getPreliminarylevel() != null){
					request.setAttribute("explain", ScoreLevelDescUtil.scoreLevelDesc(result.getPreliminarylevel()));
				}
				
				request.setAttribute("result", result);
				request.setAttribute("opinion", opinion);
				request.setAttribute("processState", processState);
				request.setAttribute("indexRates", indexRates);
			}
			return "menu/ent/reject";
		}else{
			//页面 获取session失败   ，则 跳转到登录界面
			return "redirect:/customer/logonUI.do";
		}
	}
	
	
	/**
	 * @Title  用户反馈初评信息
	 * @author Administrator  @date 2017-9-13 
	 * @Description 
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "preliminary")
	@RequestMapping("/feedbackEvaluation")
	public String feedbackEvaluation(Model model, HttpServletRequest request ,Opinion opinion)throws Exception {
		logger.info(moduleName + "[用户反馈初评信息]");
		// 得到当前用户的相关信息
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if (customer != null) {
			if(opinion == null ){
				return "menu/ent/reject";
			}else{
				Opinion opinions = opinionService.selectByEntBaseInfoKey(customer.getEntid(), 0);
				ProcessState processState = processStateService.selectByEntBaseInfoKey(customer.getEntid());
				if(opinions == null){
					opinions = new Opinion();
					opinions.setFeekbacknum(1);
					opinions.setUuid(UUID.randomUUID().toString().replace("-", ""));
					opinions.setIsconfirm(opinion.getIsconfirm());//是否确定
					if(opinions.getIsconfirm() == 1){
						processState.setScorestate(4);//设置企业状态
					}else{
						processState.setScorestate(2);//设置企业状态
					}
					processStateService.updateByPrimaryKeySelective(processState);
					opinions.setIsadmin(0);//是否管理员意见;1是，0否
					opinions.setDealer(customer.getUsername());//处理人
					opinions.setOpinion(new String (opinion.getOpinion().getBytes("iso8859-1"),"UTF-8"));//反馈意见
					opinions.setUpdatetime(DateTime.getCurrentTimeStamp());//反馈时间
					opinions.setEntid(customer.getEntid());
					opinionService.insertSelective(opinions);
				}else{
					int feekbacknum=0;
					if(opinions.getFeekbacknum() != null){
						feekbacknum=opinions.getFeekbacknum();
					} 
					opinions.setFeekbacknum(feekbacknum+1);
					opinions.setIsconfirm(opinion.getIsconfirm());//是否确定
					if(opinions.getIsconfirm() == 1){
						processState.setScorestate(4);//设置企业状态
					}else{
						processState.setScorestate(2);//设置企业状态
					}
					processStateService.updateByPrimaryKeySelective(processState);
					String opi=new String (opinion.getOpinion().getBytes("iso8859-1"),"UTF-8");
					System.out.println(opi);
					opinions.setIsadmin(0);//是否管理员意见;1是，0否
					opinions.setDealer(customer.getUsername());//处理人
					opinions.setOpinion(new String (opinion.getOpinion().getBytes("iso8859-1"),"UTF-8"));//反馈意见
					opinions.setUpdatetime(DateTime.getCurrentTimeStamp());//反馈时间
					opinions.setEntid(customer.getEntid());
					opinionService.updateByPrimaryKey(opinions);
				}
				return "redirect:/customer/jumpToMain.do";
			}
			
		}else{
			//页面 获取session失败   ，则 跳转到登录界面
			return "redirect:/customer/logonUI.do";
		}
	}
	/**
	 * @Title  获取报告相关信息
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "downloadReport")
	@RequestMapping("/downloadReport")
	@ResponseBody
	public Map<String, Object> downloadReportUI(HttpServletRequest request){
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if (customer != null) {
			entBaseInfoUuid = customer.getEntid();
			EntBaseInfo ent= entBaseInfoService.selectByPrimaryKey(entBaseInfoUuid);
			EntResult entResult = entResultService.selectByEntId(entBaseInfoUuid);
			if(entResult != null && entResult.getReporturl() != null ){
				String path = BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+entResult.getReporturl();
				File file = new File(path);
				if(file.isFile()){
					msgMap.put("reporturl", 1);
				}else{
					msgMap.put("reporturl", 0);
				}
			}else{
				msgMap.put("reporturl", 0);
			}
			msgMap.put("entResult", entResult);
			msgMap.put("entName", ent.getName());
			logger.info(moduleName + "[获取当前账户报告相关信息]");
			msgMap.put("status", 1);
			return msgMap;
		}else{
			msgMap.put("status", 0);
//			return "redirect:/customer/logonUI.do";
			return msgMap;
		}
		
	}
	/**
	 * @Title 下载报告
	 * @author  Administrator  @date 2017-9-25 
	 * @Description 
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "downloadReport")
	@RequestMapping("/downLoad")
	public String downLoad(HttpServletResponse response,HttpServletRequest request,String report) {
		logger.info(moduleName + "[评分报告下载]");
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmss");
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if( customer != null){
			entBaseInfoUuid = customer.getEntid();
			EntBaseInfo ent= entBaseInfoService.selectByPrimaryKey(entBaseInfoUuid);
			EntResult entResult = entResultService.selectByEntId(entBaseInfoUuid);
			if(entResult != null && entResult.getReporturl()!=null && !"".equals(entResult.getReporturl().trim())){
				String path=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+entResult.getReporturl();
				String name=ent.getName()+"-"+sdf.format(new Date())+".pdf";
				BufferedInputStream bis = null;
				BufferedOutputStream bos = null;
				OutputStream fos = null;
				InputStream fis = null;
				// 进行下载
				try {
					fis = new FileInputStream(path);
					bis = new BufferedInputStream(fis);
					fos = response.getOutputStream();
					bos = new BufferedOutputStream(fos);
					// 这个就就是弹出下载对话框的关键代码
					/*
					 * System.out.println(name);
					 * System.out.println(URLEncoder.encode(name,"utf-8"));
					 */
					name = URLEncoder.encode(name, "utf-8");
					name = URLEncoder.encode(name, "utf-8");
					name = URLDecoder.decode(name, "utf-8");
					name = URLDecoder.decode(name, "utf-8");
					/* name = new String(name.getBytes("ISO8859-1"), "utf-8"); */
					System.out.println(name);
					name = new String(name.getBytes("gbk"), "ISO8859-1");
					System.out.println(name);
					response.setHeader("cache-control", "public");
					response.setHeader("Pragma", "public");
					response.setHeader("Content-disposition", "attachment;filename="
							+ name);
					int bytesRead = 0;
					// 都是用输入流进行先读，然后用输出流去写，唯一不同的是我用的是缓冲输入输出流
					byte[] buffer = new byte[8192];
					while ((bytesRead = bis.read(buffer, 0, 8192)) != -1) {
						bos.write(buffer, 0, bytesRead);
					}
					bos.flush();
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					if (fos != null) {
						try {
							fos.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (bis != null) {
						try {
							bis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (fis != null) {
						try {
							fis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (bos != null) {
						try {
							bos.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
		return null;
	}
	/**
	 * @Title  获取历史报告相关信息
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "history")
	@RequestMapping("/downloadReportHistoricalUI")
	@ResponseBody
	public Map<String, Object> downloadReportHistoricalUI(HttpServletRequest request,String hisId){
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if (customer != null && hisId != null) {
			Historical historical =  historicalService.selectByPrimaryKey(hisId);
			HistoricalVO historicalVO = new HistoricalVO();
			if(historical != null && historical.getHistoricalxmlurl() != null ){
				 //获取 盘符
				try {
					 String adr=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root");
					 System.out.println("获取历史 xml : "+ adr+historical.getHistoricalxmlurl());
					 File f = new File(adr+historical.getHistoricalxmlurl());   
				     SAXReader reader = new SAXReader();   
				     Document doc = reader.read(f);
				     //获取根节点
				     Element root = doc.getRootElement();   
				     //查找子节点
				   //查找子节点
				     Element entBaseInfo =  (Element) root.elementIterator("EntBaseInfo").next();
				     historicalVO.setHistoricalId(historical.getUuid());
				     historicalVO.setEntuuid(entBaseInfo.elementText("uuid"));
				     historicalVO.setName(entBaseInfo.elementText("name"));
				     
				     Element entResult =  (Element) root.elementIterator("EntResult").next();
				     historicalVO.setEncoding(entResult.elementText("encoding"));
				     historicalVO.setGradeTime(entResult.elementText("gradeTime"));
				     historicalVO.setReportUrl(entResult.elementText("reportUrl"));
					 String path = BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+historicalVO.getReportUrl();
					 System.out.println("获取历史 报告 url : "+ path);
					 File file = new File(path);
					 if(file.isFile()){
						msgMap.put("reporturl", 1);
					 }else{
						msgMap.put("reporturl", 0);
					 }
				} catch (DocumentException e) {
					e.printStackTrace();
				}
			}else{
				msgMap.put("reporturl", 0);
			}
			msgMap.put("historica", historicalVO);
			logger.info(moduleName + "[获取当前账户报告相关信息]");
			msgMap.put("status", 1);
			return msgMap;
		}else{
			msgMap.put("status", 0);
			return msgMap;
		}
		
	}
	
	
	/**
	 * @Title 下载历史报告
	 * @author  Administrator  @date 2017-9-25 
	 * @Description 
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "history")
	@RequestMapping("/downLoadHistorical")
	public String downLoadHistorical(HttpServletResponse response,HttpServletRequest request,String hisId) {
		logger.info(moduleName + "[评分报告下载]");
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmss");
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if( customer != null && hisId != null){
			//获取
			Historical historical =  historicalService.selectByPrimaryKey(hisId);
			String entName = "";
			String reportUrl = "";
			if(historical != null && historical.getHistoricalxmlurl() != null ){
				 //获取 盘符
				try {
					 String adr=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root");
					 File f = new File(adr+historical.getHistoricalxmlurl());   
				     SAXReader reader = new SAXReader();   
				     Document doc = reader.read(f);
				     //获取根节点
				     Element root = doc.getRootElement();   
				     //查找子节点
				   //查找子节点
				     entName =  ((Element) root.elementIterator("EntBaseInfo").next()).elementText("name");
				     reportUrl =  ((Element) root.elementIterator("EntResult").next()).elementText("reportUrl");
				} catch (DocumentException e) {
					e.printStackTrace();
				}
			}
			
			if(entName != null && reportUrl!=null ){
				String path=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+reportUrl;
				System.out.println("获取历史 报告  pdf : "+ path);
				String name=entName+"-"+sdf.format(new Date())+".pdf";
				BufferedInputStream bis = null;
				BufferedOutputStream bos = null;
				OutputStream fos = null;
				InputStream fis = null;
				// 进行下载
				try {
					fis = new FileInputStream(path);
					bis = new BufferedInputStream(fis);
					fos = response.getOutputStream();
					bos = new BufferedOutputStream(fos);
					// 这个就就是弹出下载对话框的关键代码
					/*
					 * System.out.println(name);
					 * System.out.println(URLEncoder.encode(name,"utf-8"));
					 */
					name = URLEncoder.encode(name, "utf-8");
					name = URLEncoder.encode(name, "utf-8");
					name = URLDecoder.decode(name, "utf-8");
					name = URLDecoder.decode(name, "utf-8");
					/* name = new String(name.getBytes("ISO8859-1"), "utf-8"); */
					System.out.println(name);
					name = new String(name.getBytes("gbk"), "ISO8859-1");
					System.out.println(name);
					response.setHeader("cache-control", "public");
					response.setHeader("Pragma", "public");
					response.setHeader("Content-disposition", "attachment;filename="
							+ name);
					int bytesRead = 0;
					// 都是用输入流进行先读，然后用输出流去写，唯一不同的是我用的是缓冲输入输出流
					byte[] buffer = new byte[8192];
					while ((bytesRead = bis.read(buffer, 0, 8192)) != -1) {
						bos.write(buffer, 0, bytesRead);
					}
					bos.flush();
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					if (fos != null) {
						try {
							fos.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (bis != null) {
						try {
							bis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (fis != null) {
						try {
							fis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (bos != null) {
						try {
							bos.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
		return null;
	}
	/**
	 * @Title  获取当前账户信息
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "customer", privilegeValue = "ownInfo")
	@RequestMapping("/userInfoUI")
	public String userInfoUI(HttpServletRequest request){
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if (customer != null) {
			logger.info(moduleName + "[获取用户相关信息 ");
			request.getSession().setAttribute(SessionName.CUSTOMER, customer);
			return "menu/info";
		}else{
			return "redirect:/customer/logonUI.do";
		}
	}
	/**
	 * @Title  获取当前账户信息
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "customer", privilegeValue = "ownInfo")
	@RequestMapping("/userInfo")
	@ResponseBody
	public Map<String, Object> userInfo(Customer customers, HttpServletRequest request){
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		boolean flag = true;
		if (customer != null) {
			if(customers != null){
				if(customers.getCellphone()!= null){
					Map<String, Object> cellphone = new HashMap<String, Object>();
					cellphone.put("cellphone", customers.getCellphone());
					Customer customer1 =  customerService.selectByParam(cellphone);
					if(customer1 != null){
						flag = false;
						msgMap.put("msg", "联系电话已被添加");
					}else{
						flag = true;
					}
				}
				if(customers.getEmail()!= null){
					Map<String, Object> email = new HashMap<String, Object>();
					email.put("email", customers.getEmail());
					Customer customer2 =  customerService.selectByParam(email);
					if(customer2 != null){
						flag = false;
						msgMap.put("msg", "Email已被添加");
					}else{
						flag = true;
					}
				}
				if(flag){
					try {
						customer.setRealname(customers.getRealname());
						customer.setEmail(customers.getEmail());
						customer.setCellphone(customers.getCellphone());
					//跟新时间
						customer.setUpdatetime(DateTime.getCurrentTimeStamp());
					//更新登录次数
						customer.setLogintimes(customer.getLogintimes()+1);
					//更新上次IP
						customer.setLastloginip(InetAddress.getLocalHost().toString().split("/")[1]);
						
						logger.info(moduleName + "[跟新用户相关信息] 登录IP："+InetAddress.getLocalHost());
						msgMap.put("status", 1);
						customerService.updateByPrimaryKey(customer);
					} catch (UnknownHostException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				msgMap.put("status", 0);
			}else{
				msgMap.put("msg", "网路错误 ,请重新提交  ");
				msgMap.put("status", 0);
			}
		}else{
			msgMap.put("status", -1);
		}
			//return "redirect:/customer/logonUI.do";
		return msgMap;
		
	}
	
	/**
	 * @Title 修改密码操作
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "customer", privilegeValue = "updatePwd")
	@RequestMapping("/updatePassword")
	@ResponseBody
	public Map<String, Object> updatePassword(HttpServletRequest request,String cellphone,String oldPassword,String newPassword,String newsPassword){
		logger.info(moduleName + "[修改密码]");
		System.out.println(cellphone +" ; " +oldPassword+" ; "+newPassword+" ; "+newsPassword);
		Map<String, Object> msgMap = new HashMap<String, Object>();
		MD5Code md5 = new MD5Code();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if(newPassword == null || newsPassword == null ){
			msgMap.put("status", "0");
			msgMap.put("msg", "修改密码错误，请重新输入");
			logger.info(moduleName + "[修改密码为空]");
			return msgMap;
		}
		if(newPassword.trim() == newsPassword.trim()){
			msgMap.put("status", "0");
			msgMap.put("msg", "修改密码与确认密码不一致，请重新输入");
			logger.info(moduleName + "[修改密码与确认密码不一致]");
			return msgMap;
		}
		if (customer != null) {
			
			//同手机号 同帐号
			if(customer.getCellphone().equals(cellphone)){
				//与原密码不一致
				System.out.println(md5.getMD5ofStr(oldPassword.trim()));
				if(customer.getPassword().equals(md5.getMD5ofStr(oldPassword.trim()))){
						customer.setPassword(md5.getMD5ofStr(newPassword.trim()));
						customerService.updateByPrimaryKey(customer);
						msgMap.put("status", "1");
						logger.info(moduleName + "[修改密码成功]");
				}else{
					msgMap.put("status", "0");
					msgMap.put("msg", "原密码输入错误,请重新输入 ");
					logger.info(moduleName + "[修改密码]");
				}
				
			}else{
				msgMap.put("msg", "网络错误，请重新登录 错误代码：307");
				msgMap.put("status", "-1");
			}
			//"menu/info";
		}else{
			msgMap.put("msg", "网络错误，请重新登录    错误代码：204");
			msgMap.put("status", "-1");
			// "redirect:/customer/logonUI.do";
		}
		return msgMap;
	}
	
	/**
	 * @Title 查看驳回项
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "lookOpinion")
	@RequestMapping("/opinion")
	@ResponseBody
	public Map<String, Object> opinion(HttpServletRequest request){
		logger.info(moduleName + "[查看驳回项]");
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if(customer != null){
		Opinion opinion = opinionService.selectByEntBaseInfoKey(customer.getEntid(), 1);
			msgMap.put("opinion", opinion);
			msgMap.put("status", "1");
		}else{
			msgMap.put("msg", "网络错误，请重新登录    错误代码：204");
			msgMap.put("status", "-1");
		}
		return msgMap;
	}
	
	
	 /**
	  * @Title 展示历史信息
	  * @author  Administrator  @date 2017-9-25 
	  * @Description 
	  *
	  */
	@Permission(model = "enterprise", privilegeValue = "history")
	@RequestMapping("/historical")
	 public String historical(HttpServletRequest request){
		 logger.info(moduleName + "[查看历史记录]");
		 Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		 if(customer != null){
			List<Historical> historicals = historicalService.selectByEntId(customer.getEntid());
			//获取 盘符
			String adr=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root");
			//创建集合 保存对象的历史数据
			List<HistoricalVO> historicalVOs = new ArrayList<HistoricalVO>();
			//保存对象的当前数据
			HistoricalVO historicalVO1 = new HistoricalVO();
			//获取  企业基础信息
			EntBaseInfo baseInfo = entBaseInfoService.selectByPrimaryKey(customer.getEntid());
			if(baseInfo != null){
				 historicalVO1.setEntuuid(customer.getEntid());
				 historicalVO1.setName(baseInfo.getName());
				 historicalVO1.setUscc(baseInfo.getUscc());
			     historicalVO1.setAddress(baseInfo.getAddress());
			     historicalVO1.setEmail(baseInfo.getEmail());
			     historicalVO1.setLegalPerson(baseInfo.getLegalperson());
			     historicalVO1.setTel(baseInfo.getTel());
			     historicalVO1.setWebsite(baseInfo.getWebsite());
			}
			//获取 评分信息
			EntResult result = entResultService.selectByEntId(customer.getEntid());
		     if(result != null){
		    	 SimpleDateFormat dateFormat = new  SimpleDateFormat("yyyy-MM-dd");
		    	 historicalVO1.setEncoding(result.getEncoding());
			     historicalVO1.setFinalLevel(result.getFinallevel());
			     String finalscore = null;
			     if(result.getFinalscore() != null){
			    	 finalscore =  result.getFinalscore().toString();
			     }
			     historicalVO1.setFinalScore(finalscore);
			     if(result.getGradetime()!= null){
			    	 historicalVO1.setGradeTime(dateFormat.format( result.getGradetime()));
			     }
			     
			     //获取 模型信息
			     com.credit.model.addition.Model model = modelService.selectByPrimaryKey(result.getModelid());
			     if(model != null){
			    	 historicalVO1.setModelName(model.getName());
			    	 historicalVO1.setModelVersion(model.getVersion());
			     }
		     }
		    
			
		     //通过xml 获取历史
			for (Historical historical : historicals) {
				HistoricalVO historicalVO = new HistoricalVO();
				try {
					 System.out.println("path :" +historical.getHistoricalxmlurl());
				     File f = new File(adr+historical.getHistoricalxmlurl());   
				     if(!f.isFile()){
				    	 System.out.println("该路径下不存在相关文件:"+adr+historical.getHistoricalxmlurl());
				    	 continue;
				     }
				     SAXReader reader = new SAXReader();   
				     Document doc = reader.read(f);  
				     //获取根节点
				     Element root = doc.getRootElement();   
				     //查找子节点
				     Element entBaseInfo =  (Element) root.elementIterator("EntBaseInfo").next();
				     historicalVO.setHistoricalId(historical.getUuid());
				     historicalVO.setEntuuid(entBaseInfo.elementText("uuid"));
				     historicalVO.setAddress(entBaseInfo.elementText("address"));
				     historicalVO.setEmail(entBaseInfo.elementText("email"));
				     historicalVO.setLegalPerson(entBaseInfo.elementText("legalPerson"));
				     historicalVO.setName(entBaseInfo.elementText("name"));
				     historicalVO.setTel(entBaseInfo.elementText("tel"));
				     historicalVO.setUscc(entBaseInfo.elementText("USCC"));
				     historicalVO.setWebsite(entBaseInfo.elementText("website"));
				     
				     Element entResult =  (Element) root.elementIterator("EntResult").next();
				     historicalVO.setEncoding(entResult.elementText("encoding"));
				     historicalVO.setFinalLevel(entResult.elementText("finalLevel"));
				     historicalVO.setFinalScore(entResult.elementText("finalScore"));
				     historicalVO.setGradeTime(entResult.elementText("gradeTime"));
				     
				     Element models =  (Element) root.elementIterator("Model").next();
				     historicalVO.setModelName(models.elementText("name"));
				     historicalVO.setModelVersion(models.elementText("version"));
				     
				     System.out.println("historicalVO : "+ historicalVO);
				     
				    } catch (Exception e) {   
				     e.printStackTrace();   
				   }   
				
				historicalVOs.add(historicalVO);
			}
			request.setAttribute("historicalVO", historicalVO1);
			request.setAttribute("historicalVOs", historicalVOs);
			
			return "menu/ent/historical";
		 }else{
			return "redirect:/customer/logonUI.do";
		 }	
	 }
	/**
	 * @Title 阅读协议
	 * @author  Administrator  @date 2017-9-15 
	 * @Description 
	 *
	 */
	@Permission(model = "enterprise", privilegeValue = "readProtocols")
	@RequestMapping("/readProtocols")
	@ResponseBody
	public Map<String, Object> readProtocols(HttpServletRequest request){
		logger.info(moduleName + "[阅读协议]");
		Map<String, Object> msgMap = new HashMap<String, Object>();
		Customer customer = (Customer) request.getSession().getAttribute(SessionName.CUSTOMER);
		if(customer != null){
		    ProcessState process=processStateService.selectByEntBaseInfoKey(customer.getEntid());
		    if(process!=null){
		    	process.setReadstate(1);
		    	processStateService.updateByPrimaryKeySelective(process);
		    	msgMap.put("msg", "阅读协议状态更新成功");
		    }else{
		    	msgMap.put("msg", "阅读协议状态更新失败");
		    }
		}else{
			msgMap.put("msg", "网络错误，请重新登录    错误代码：204");
		}
		return msgMap;
	}
}
