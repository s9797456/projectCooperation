package com.credit.controller.perscore;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.batik.transcoder.TranscoderException;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import org.apache.batik.transcoder.image.PNGTranscoder;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import sun.misc.BASE64Encoder;

import com.credit.bean.enterprise.EntResult;
import com.credit.bean.enterprise.Executives;
import com.credit.bean.enterprise.Shareholder;
import com.credit.bean.person.PerBaseInfo;
import com.credit.bean.person.PerResult;
import com.credit.bean.vo.enterprise.FinalRateImageVo;
import com.credit.bean.vo.enterprise.FinalcialImageVo;
import com.credit.bean.vo.html2pdf.FinancialChange;
import com.credit.bean.vo.html2pdf.FinancialData;
import com.credit.bean.vo.html2pdf.PerReport;
import com.credit.bean.vo.html2pdf.YearVo;
import com.credit.bean.vo.privilege.Permission;
import com.credit.service.enterprise.ExecutivesService;
import com.credit.service.enterprise.FinanceService;
import com.credit.service.enterprise.ShareholderService;
import com.credit.service.person.PerResultService;
import com.credit.util.CODEUtil;
import com.credit.util.MD5Code;
import com.credit.util.SaveFile;
import com.credit.util.WebUtil;
import com.credit.util.ZXingUtil;
import com.credit.util.html2pdf.Html2PDFUtil;
import com.credit.util.model.IndexRateVo;
import com.credit.util.properties.BusinessUtil;

import freemarker.template.Configuration;
/**
 * @title 评分流程
 * @author 孙尚飞   2017-7-31
 * @desc
 */
@Controller
@RequestMapping("/control/perscoreReport")
public class PerScoreReportAction {
	private static final Logger logger = Logger.getLogger(PerScoreReportAction.class);
	private String moduleName = "管理员操作情况";
	private StringBuffer message = new StringBuffer("");
	private Boolean flag = true;
	Map<String, Object> msgMap = new HashMap<String, Object>();

	
	@Resource(name = "perResultServiceBean")
	private PerResultService perResultService;
	
	@Resource(name = "shareholderServiceBean")
	private ShareholderService shareholderService;
	
	@Resource(name = "executivesServiceBean")
	private ExecutivesService executivesService;
	
	@Resource(name = "financeServiceBean")
	private FinanceService financeService;

	/**
	 * @title 生成报告并下载报告
	 * @author  孙尚飞  2017-7-31
	 * @desc
	 */
	@Permission(model = "reportTemplate", privilegeValue = "report")
	@RequestMapping("/generateReport")
	@ResponseBody
	public String generateReport(HttpServletRequest request,HttpServletResponse response) {
		Configuration configuration = null;
		configuration = new Configuration();
		configuration.setDefaultEncoding("UTF-8");
		String resultID=request.getParameter("resultID");
		String reportTemplate=request.getParameter("reportTemplate");
		String dir=request.getSession().getServletContext().getRealPath("");
		String adr=BusinessUtil.getMsg("adr");
		String root=BusinessUtil.getMsg("root");
		dir=dir+root;
		adr=adr+root;
		String reports=BusinessUtil.getMsg("reports");
		String Template=BusinessUtil.getMsg("templateUrl");
		// 路径
		String path =adr+reports;
		// 名字
		Date now = new Date();
		SimpleDateFormat formate = new SimpleDateFormat("yyyyMMddHHmmss");
		File file = new File(path);
		if (!file.exists()) {
			file.mkdirs();
		}
		PerResult result=perResultService.find(resultID);
		if(result!=null){
			String name = (result.getPerBaseInfo().getName() + formate.format(now) + ".pdf").trim();
			String savePath=reports + resultID+ ".pdf";
				// 要填入模本的数据文件
			PerReport report=reportData(result, request);
			boolean flag=Html2PDFUtil.createPDF(report, adr+savePath, dir+Template, reportTemplate);
			if(flag){
				//将报告路径存入数据库中
				result.setReportUrl(savePath);
				perResultService.update(result);
				//下载报告
				downLoad(adr+savePath, name, response);
				//跨服务器传递文件
				if(BusinessUtil.getMsg("CrossUpload").equals("1")){
					if(result.getCustomer()!=null){
						if(!("".equals(result.getCustomer().getDomainName())||result.getCustomer().getDomainName()==null)){
							String url=request.getScheme()+"://"+result.getCustomer().getDomainName();
							WebUtil.crossFile(savePath, adr+savePath, url);
						}
					}
				}
			}		
		}
		return null;
	}
	/**
	 * @title 为模板装载数据
	 * @author  孙尚飞  2017-8-22
	 * @desc
	 */
	
	@SuppressWarnings("static-access")
	public PerReport reportData(PerResult result,HttpServletRequest request) {
		PerReport report=new PerReport(); 
		Date date = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy年MM月dd日");
		String dir=request.getSession().getServletContext().getRealPath("");
		String adr=BusinessUtil.getMsg("adr");
		String root=BusinessUtil.getMsg("root");
		dir=dir+root;
		adr=adr+root;
		if(result.getPerBaseInfo()!=null){
			PerBaseInfo perbaseinfo=result.getPerBaseInfo();
			report.setEntName(perbaseinfo.getName());// 公司名字${name!}
			if(result.getEncoding()==null||"".equals(result.getEncoding())){
				String encode=CODEUtil.getCODE((int) perResultService.countByEncoding());
				report.setEncoding(encode);// 报告编号
				result.setEncoding(encode);
				perResultService.update(result);
			}else{
				report.setEncoding(result.getEncoding());// 报告编号
			}
			
			if (result.getGradeTime() == null) {
				Calendar cal = format.getCalendar();
				cal.setTime(date);
				cal.add(cal.YEAR, 1);
				String valueTime = format.format(cal.getTime());
				String reportProductDate = format.format(date);
				report.setGradeTime(reportProductDate);// 评级日期${reportProductDate!}
				report.setValueTime(valueTime);// 有效期
				result.setGradeTime(date);
				perResultService.update(result);
			} else {
				Calendar cal = format.getCalendar();
				cal.setTime(result.getGradeTime());
				cal.add(cal.YEAR, 1);
				String valueTime = format.format(cal.getTime());
				String reportProductDate = format.format(result.getGradeTime());
				report.setGradeTime(reportProductDate);// 评级日期${reportProductDate!}
				report.setValueTime(valueTime);// 有效期
			}
			MD5Code md5 = new MD5Code();
			String path = request.getContextPath();
			String basePath = request.getScheme() + "://"
					+ request.getServerName() + ":"
					+ request.getServerPort() + path;
			String s1 = basePath
					+ "/user/logon_check.do?uscc="
					+ perbaseinfo.getIDCard()
					+ "&id="
					+ md5.getMD5ofStr(perbaseinfo.getUuid()
							+ perbaseinfo.getIDCard());
			String s2 = dir+BusinessUtil.getMsg("templateUrl");
			if (ZXingUtil.encodeQRCodeImage(s1, null, s2 + "/QRcode.png",
					200, 200, null)) {
				String s3 = dir+BusinessUtil.getMsg("templateUrl")+ "/QRcode.png";
				report.setQrcode(s3);
			}
			
			List<IndexRateVo> indexRates = perResultService.getIndexRate(adr+result.getScoreXMLUrl());
			if(indexRates!=null && indexRates.size()>0){//指标得分比重
				report.setIndexRates(indexRates);
			}else{
				IndexRateVo indexRate = new IndexRateVo();
				indexRates.add(indexRate);
				report.setIndexRates(indexRates);
			}
			report.setFinalLevel(result.getFinalLevel()==null?"-":result.getFinalLevel());//终评等级
			report.setScoreSummary(result.getScoreSummary()==null?"暂无该项内容。":result.getScoreSummary());//评分总结
			//企业基本信息
			
		}
		return report;
	}
	
	
/*	private List<FinancialChange> getImportantFinancialData(String entID) {}
	
	private List<FinancialChange> getImportantFinancialRate(String entID) {}*/
	/**
	 * @title 判断评分报告是否存在
	 * @author  孙尚飞  2017-8-22
	 * @desc
	 */
	//@Permission(model = "reportTemplate", privilegeValue = "report")
	@RequestMapping("/judgeReportExist")
	@ResponseBody
	public Map<String, Object> judgeReportExist(HttpServletRequest request,String resultID) {
		logger.info(moduleName + "[判断评分报告是否存在]");
		Map<String, Object> msgMap = new HashMap<String, Object>();
		boolean flag=true;
		PerResult result=perResultService.find(resultID);
		if(result==null){
			flag=false;
		}else{
			if(result.getReportUrl()==null){
				flag=false;
			}else{
				String path=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+result.getReportUrl();
				File file = new File(path);
				if (!file.exists()) {
					flag=false;
				}
			}
		}
		msgMap.put("flag", flag);
		msgMap.put("success", true);
		msgMap.put("status", true);
		return msgMap;
	}
	/**
	 * @Title 上传报告
	 * @author  孙尚飞  @date 2017-8-22 
	 * @throws Exception 
	 * @Description 
	 *
	 */
	//@Permission(model = "reportTemplate", privilegeValue = "report")
	@RequestMapping("/uploadReport")
	@ResponseBody
	public Map<String, Object> uploadReport(HttpServletRequest request) throws Exception {
		logger.info(moduleName + "[上传修改后的报告]");
		Map<String, Object> msgMap = new HashMap<String, Object>();
		if(SaveFile.judgeSuffix(request, "pdf")){
			String resultID=request.getParameter("resultID");
			PerResult result=perResultService.find(resultID);
			String path=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+BusinessUtil.getMsg("reports");
			String fileName=resultID+".pdf";
			SaveFile.deleteFile(path);
			SaveFile.uploadFile(request, path, fileName);
			//跨服务器传递文件
			if(BusinessUtil.getMsg("CrossUpload").equals("1")){
				if(result.getCustomer()!=null){
					if(!("".equals(result.getCustomer().getDomainName())||result.getCustomer().getDomainName()==null)){
						String url=request.getScheme()+"://"+result.getCustomer().getDomainName();
						WebUtil.crossFile(BusinessUtil.getMsg("reports")+fileName, path+fileName, url);
					}
				}
			}
			msgMap.put("success", true);
			msgMap.put("statue", true);
			msgMap.put("msg", "上传成功");
		}else{
			msgMap.put("success", true);
			msgMap.put("statue", false);
			msgMap.put("msg", "上传失败");
			msgMap.put("result", "上传文件不是PDF文件，请重新上传！");
		}
		return msgMap;
	}
	/**
	 * @title 下载报告
	 * @author  孙尚飞  2017-7-31
	 * @desc
	 */
	@Permission(model = "reportTemplate", privilegeValue = "report")
	@RequestMapping("/downLoadPdf")
	@ResponseBody
	public void downLoadPdf(HttpServletRequest request,HttpServletResponse response) {
		SimpleDateFormat formate = new SimpleDateFormat("yyyyMMddHHmmss");
		String resultID=request.getParameter("resultID");
		PerResult result=perResultService.find(resultID);
		String name = (result.getPerBaseInfo().getName() + formate.format(new Date()) + ".pdf").trim();
		String path=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+result.getReportUrl();
		downLoad(path, name, response);
	}
	/**
	 * @title 下载Word报告
	 * @author  孙尚飞  2017-7-31
	 * @desc
	 */
	@Permission(model = "reportTemplate", privilegeValue = "report")
	@RequestMapping("/downLoadWord")
	@ResponseBody
	public void downLoadWord(HttpServletRequest request,HttpServletResponse response) {
		SimpleDateFormat formate = new SimpleDateFormat("yyyyMMddHHmmss");
		String resultID=request.getParameter("resultID");
		PerResult result=perResultService.find(resultID);
		String name = (result.getPerBaseInfo().getName() + formate.format(new Date()) + ".doc").trim();
		String word_path=result.getReportUrl().replace(".pdf", ".doc");
		String path=BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+word_path;
		downLoad(path, name, response);
	}
	/**
	 * @title 下载方法
	 * @author  孙尚飞  2017-8-22
	 * @desc
	 */
	public String downLoad(String path,String name,HttpServletResponse response) {

		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		OutputStream fos = null;
		InputStream fis = null;
		// 进行下载
		try {
			fis = new FileInputStream(path);
			bis = new BufferedInputStream(fis);
			fos = response.getOutputStream();
			bos = new BufferedOutputStream(fos);
			// 这个就就是弹出下载对话框的关键代码
			name = URLEncoder.encode(name, "utf-8");
			name = URLEncoder.encode(name, "utf-8");
			name = URLDecoder.decode(name, "utf-8");
			name = URLDecoder.decode(name, "utf-8");
			/* name = new String(name.getBytes("ISO8859-1"), "utf-8"); */
			name = new String(name.getBytes("gbk"), "ISO8859-1");
			response.setHeader("cache-control", "public");
			response.setHeader("Pragma", "public");
			response.setHeader("Content-disposition",
					"attachment;filename=" + name);
			int bytesRead = 0;
			// 都是用输入流进行先读，然后用输出流去写，唯一不同的是我用的是缓冲输入输出流
			byte[] buffer = new byte[8192];
			while ((bytesRead = bis.read(buffer, 0, 8192)) != -1) {
				bos.write(buffer, 0, bytesRead);
			}
			bos.flush();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			// e.printStackTrace();
		} finally {
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (bis != null) {
				try {
					bis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (fis != null) {
				try {
					fis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (bos != null) {
				try {
					bos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}
	private String getImageStr(String url) {
		InputStream in = null;
		byte[] data = null;
		try {
			in = new FileInputStream(url);
			data = new byte[in.available()];
			in.read(data);
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		BASE64Encoder encoder = new BASE64Encoder();
		return encoder.encode(data);
	}
	
	
	// 财务及指标
		private Map<String, Object> reportfinalAndIndexData(String entID) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
			list = financeService.reportFinalData(entID);
			Map<String, String> map1 = new HashMap<String, String>();
			Map<String, String> map2 = new HashMap<String, String>();
			Map<String, String> map3 = new HashMap<String, String>();
			if (list.size() > 2) {
				map1 = list.get(0);
				map2 = list.get(1);
				map3 = list.get(2);
				dataMap.put("fianlDate1", map1.get("年份"));
				dataMap.put("fianlDate2", map2.get("年份"));
				dataMap.put("fianlDate3", map3.get("年份"));
			
			String liquidAssets1 = map1.get("流动资产合计") == null ? "-" : map1
					.get("流动资产合计");
			String liquidAssets2 = map2.get("流动资产合计") == null ? "-" : map2
					.get("流动资产合计");
			String liquidAssets3 = map3.get("流动资产合计") == null ? "-" : map3
					.get("流动资产合计");
			dataMap.put("liquidAssets1", liquidAssets1);
			dataMap.put("liquidAssets2", liquidAssets2);
			dataMap.put("liquidAssets3", liquidAssets3);
			if ("-".equals(liquidAssets1) || "-".equals(liquidAssets2) || "0".equals(liquidAssets2)) {
				dataMap.put("liquidAssets1Rate", "-");
			} else {
					dataMap.put("liquidAssets1Rate",String.format("%.2f",(Double.parseDouble(liquidAssets1) * 100 / Double.parseDouble(liquidAssets2)) - 100)+ "%");
			}
			if ("-".equals(liquidAssets2) || "-".equals(liquidAssets3) || "0".equals(liquidAssets3)) {
				dataMap.put("liquidAssets2Rate", "-");
			} else {
				dataMap.put(
						"liquidAssets2Rate",
						String.format("%.2f",
								(Double.parseDouble(liquidAssets2) * 100 / Double
										.parseDouble(liquidAssets3)) - 100)
								+ "%");
			}

			String liquidLiabilities1 = map1.get("流动负债合计") == null ? "-" : map1
					.get("流动负债合计");
			String liquidLiabilities2 = map2.get("流动负债合计") == null ? "-" : map2
					.get("流动负债合计");
			String liquidLiabilities3 = map3.get("流动负债合计") == null ? "-" : map3
					.get("流动负债合计");
			dataMap.put("liquidLiabilities1", liquidLiabilities1);
			dataMap.put("liquidLiabilities2", liquidLiabilities2);
			dataMap.put("liquidLiabilities3", liquidLiabilities3);
			if ("-".equals(liquidLiabilities1) || "-".equals(liquidLiabilities2) || "0".equals(liquidLiabilities2)) {
				dataMap.put("liquidLiabilities1Rate", "-");
			} else {
				dataMap.put(
						"liquidLiabilities1Rate",
						String.format("%.2f", (Double
								.parseDouble(liquidLiabilities1) * 100 / Double
								.parseDouble(liquidLiabilities2)) - 100)
								+ "%");
			}
			if ("-".equals(liquidLiabilities2) || "-".equals(liquidLiabilities3) || "0".equals(liquidLiabilities3)) {
				dataMap.put("liquidLiabilities2Rate", "-");
			} else {
				dataMap.put(
						"liquidLiabilities2Rate",
						String.format("%.2f", (Double
								.parseDouble(liquidLiabilities2) * 100 / Double
								.parseDouble(liquidLiabilities3)) - 100)
								+ "%");
			}
			// 营运资本workingCapital
			try {
				Double workingCapital1 = Double.parseDouble(map1.get("流动资产合计"))
						- Double.parseDouble(map1.get("流动负债合计"));
				dataMap.put("workingCapital1", workingCapital1);
			} catch (Exception e) {
				dataMap.put("workingCapital1", "-");
			}
			try {
				Double workingCapital2 = Double.parseDouble(map2.get("流动资产合计"))
						- Double.parseDouble(map2.get("流动负债合计"));
				dataMap.put("workingCapital2", workingCapital2);
			} catch (Exception e) {
				dataMap.put("workingCapital2", "-");
			}
			try {
				Double workingCapital3 = Double.parseDouble(map3.get("流动资产合计"))
						- Double.parseDouble(map3.get("流动负债合计"));
				dataMap.put("workingCapital3", workingCapital3);
			} catch (Exception e) {
				dataMap.put("workingCapital3", "-");
			}
			try {
				Double workingCapital1 = Double.parseDouble(map1.get("流动资产合计"))
						- Double.parseDouble(map1.get("流动负债合计"));
				Double workingCapital2 = Double.parseDouble(map2.get("流动资产合计"))
						- Double.parseDouble(map2.get("流动负债合计"));
				if(workingCapital2 != 0){
					dataMap.put(
							"workingCapital1Rate",
							String.format("%.2f",
									(workingCapital1 / workingCapital2) * 100 - 100)
									+ "%");
				}else{
					dataMap.put("workingCapital1Rate", "-");
				}
			} catch (Exception e) {
				dataMap.put("workingCapital1Rate", "-");
			}
			try {
				Double workingCapital2 = Double.parseDouble(map2.get("流动资产合计"))
						- Double.parseDouble(map2.get("流动负债合计"));
				Double workingCapital3 = Double.parseDouble(map3.get("流动资产合计"))
						- Double.parseDouble(map3.get("流动负债合计"));
				if(workingCapital3!=0){
					dataMap.put(
							"workingCapital2Rate",
							String.format("%.2f",
									(workingCapital2 / workingCapital3) * 100 - 100)
									+ "%");
				}else{
					dataMap.put("workingCapital2Rate", "-");
				}
				
			} catch (Exception e) {
				dataMap.put("workingCapital2Rate", "-");
			}
			// 有形净值
			try {
				Double tangibleNetWorth1 = Double.parseDouble(map1.get("资产总计"))
						- Double.parseDouble(map1.get("无形资产"));
				dataMap.put("tangibleNetWorth1", tangibleNetWorth1);// 有形净值
			} catch (Exception e) {
				dataMap.put("tangibleNetWorth1", "-");// 有形净值
			}
			try {
				Double tangibleNetWorth2 = Double.parseDouble(map2.get("资产总计"))
						- Double.parseDouble(map2.get("无形资产"));
				dataMap.put("tangibleNetWorth2", tangibleNetWorth2);// 有形净值
			} catch (Exception e) {
				dataMap.put("tangibleNetWorth2", "-");// 有形净值
			}
			try {
				Double tangibleNetWorth3 = Double.parseDouble(map3.get("资产总计"))
						- Double.parseDouble(map3.get("无形资产"));
				dataMap.put("tangibleNetWorth3", tangibleNetWorth3);// 有形净值
			} catch (Exception e) {
				dataMap.put("tangibleNetWorth3", "-");// 有形净值
			}
			try {
				Double tangibleNetWorth1 = Double.parseDouble(map1.get("资产总计"))
						- Double.parseDouble(map1.get("无形资产"));
				Double tangibleNetWorth2 = Double.parseDouble(map2.get("资产总计"))
						- Double.parseDouble(map2.get("无形资产"));
				if(tangibleNetWorth2!=0){
					dataMap.put(
							"tangibleNetWorth1Rate",
							String.format("%.2f",
									(tangibleNetWorth1 / tangibleNetWorth2) * 100 - 100)
									+ "%");
				}else{
					dataMap.put("tangibleNetWorth1Rate", "-");
				}
			} catch (Exception e) {
				dataMap.put("tangibleNetWorth1Rate", "-");
			}
			try {
				Double tangibleNetWorth2 = Double.parseDouble(map2.get("资产总计"))
						- Double.parseDouble(map2.get("无形资产"));
				Double tangibleNetWorth3 = Double.parseDouble(map3.get("资产总计"))
						- Double.parseDouble(map3.get("无形资产"));
				if(tangibleNetWorth3!=0){
					dataMap.put(
							"tangibleNetWorth2Rate",
							String.format("%.2f",
									(tangibleNetWorth2 / tangibleNetWorth3) * 100 - 100)
									+ "%");
				}else{
					dataMap.put("tangibleNetWorth2Rate", "-");
				}
			} catch (Exception e) {
				dataMap.put("tangibleNetWorth2Rate", "-");
			}
			// 固定资产
			String fixedAssets1 = map1.get("固定资产原价") == null ? "-" : map1
					.get("固定资产原价");
			String fixedAssets2 = map2.get("固定资产原价") == null ? "-" : map2
					.get("固定资产原价");
			String fixedAssets3 = map3.get("固定资产原价") == null ? "-" : map3
					.get("固定资产原价");
			dataMap.put("fixedAssets1", fixedAssets1);
			dataMap.put("fixedAssets2", fixedAssets2);
			dataMap.put("fixedAssets3", fixedAssets3);
			if ("-".equals(fixedAssets1) || "-".equals(fixedAssets2) || "0".equals(fixedAssets2)) {
				dataMap.put("fixedAssets1Rate", "-");
			} else {
				dataMap.put(
						"fixedAssets1Rate",
						String.format("%.2f",
								(Double.parseDouble(fixedAssets1) * 100 / Double
										.parseDouble(fixedAssets2)) - 100)
								+ "%");
			}
			if ("-".equals(fixedAssets2) || "-".equals(fixedAssets3) || "0".equals(fixedAssets3)) {
				dataMap.put("fixedAssets2Rate", "-");
			} else {
				dataMap.put(
						"fixedAssets2Rate",
						String.format("%.2f",
								(Double.parseDouble(fixedAssets2) * 100 / Double
										.parseDouble(fixedAssets3)) - 100)
								+ "%");
			}
			// 资产总计
			String totalAssets1 = map1.get("资产总计") == null ? "-" : map1.get("资产总计");
			String totalAssets2 = map2.get("资产总计") == null ? "-" : map2.get("资产总计");
			String totalAssets3 = map3.get("资产总计") == null ? "-" : map3.get("资产总计");
			dataMap.put("totalAssets1", totalAssets1);
			dataMap.put("totalAssets2", totalAssets2);
			dataMap.put("totalAssets3", totalAssets3);
			if ("-".equals(totalAssets1) || "-".equals(totalAssets2) || "0".equals(totalAssets2)) {
				dataMap.put("totalAssets1Rate", "-");
			} else {
				dataMap.put(
						"totalAssets1Rate",
						String.format("%.2f",
								(Double.parseDouble(totalAssets1) * 100 / Double
										.parseDouble(totalAssets2)) - 100)
								+ "%");
			}
			if ("-".equals(totalAssets2) || "-".equals(totalAssets3) || "0".equals(totalAssets3)) {
				dataMap.put("totalAssets2Rate", "-");
			} else {
				dataMap.put(
						"totalAssets2Rate",
						String.format("%.2f",
								(Double.parseDouble(totalAssets2) * 100 / Double
										.parseDouble(totalAssets3)) - 100)
								+ "%");
			}
			// 负债合计
			String totalLiabilities1 = map1.get("负债合计") == null ? "-" : map1
					.get("负债合计");
			String totalLiabilities2 = map2.get("负债合计") == null ? "-" : map2
					.get("负债合计");
			String totalLiabilities3 = map3.get("负债合计") == null ? "-" : map3
					.get("负债合计");
			dataMap.put("totalLiabilities1", totalLiabilities1);
			dataMap.put("totalLiabilities2", totalLiabilities2);
			dataMap.put("totalLiabilities3", totalLiabilities3);
			if ("-".equals(totalLiabilities1) || "-".equals(totalLiabilities2) || "0".equals(totalLiabilities2)) {
				dataMap.put("totalLiabilities1Rate", "-");
			} else {
				dataMap.put(
						"totalLiabilities1Rate",
						String.format("%.2f", (Double
								.parseDouble(totalLiabilities1) * 100 / Double
								.parseDouble(totalLiabilities2)) - 100)
								+ "%");
			}
			if ("-".equals(totalLiabilities2) || "-".equals(totalLiabilities3) || "0".equals(totalLiabilities3)) {
				dataMap.put("totalLiabilities2Rate", "-");
			} else {
				dataMap.put(
						"totalLiabilities2Rate",
						String.format("%.2f", (Double
								.parseDouble(totalLiabilities2) * 100 / Double
								.parseDouble(totalLiabilities3)) - 100)
								+ "%");
			}
			// 股东权益合计
			String ownerEquity1 = map1.get("股东权益合计") == null ? "-" : map1
					.get("股东权益合计");
			String ownerEquity2 = map2.get("股东权益合计") == null ? "-" : map2
					.get("股东权益合计");
			String ownerEquity3 = map3.get("股东权益合计") == null ? "-" : map3
					.get("股东权益合计");
			dataMap.put("ownerEquity1", ownerEquity1);
			dataMap.put("ownerEquity2", ownerEquity2);
			dataMap.put("ownerEquity3", ownerEquity3);
			if ("-".equals(ownerEquity1) || "-".equals(ownerEquity2) || "0".equals(ownerEquity2)) {
				dataMap.put("ownerEquity1Rate", "-");
			} else {
				dataMap.put(
						"ownerEquity1Rate",
						String.format("%.2f",
								(Double.parseDouble(ownerEquity1) * 100 / Double
										.parseDouble(ownerEquity2)) - 100)
								+ "%");
			}
			if ("-".equals(ownerEquity2) || "-".equals(ownerEquity3) || "0".equals(ownerEquity3)) {
				dataMap.put("ownerEquity2Rate", "-");
			} else {
				dataMap.put(
						"ownerEquity2Rate",
						String.format("%.2f",
								(Double.parseDouble(ownerEquity2) * 100 / Double
										.parseDouble(ownerEquity3)) - 100)
								+ "%");
			}
			// 营业收入
			String operatingIncome1 = map1.get("营业收入") == null ? "-" : map1
					.get("营业收入");
			String operatingIncome2 = map2.get("营业收入") == null ? "-" : map2
					.get("营业收入");
			String operatingIncome3 = map3.get("营业收入") == null ? "-" : map3
					.get("营业收入");
			dataMap.put("operatingIncome1", operatingIncome1);
			dataMap.put("operatingIncome2", operatingIncome2);
			dataMap.put("operatingIncome3", operatingIncome3);
			if ("-".equals(operatingIncome1) || "-".equals(operatingIncome2) || "0".equals(operatingIncome2)) {
				dataMap.put("operatingIncome1Rate", "-");
			} else {
				dataMap.put(
						"operatingIncome1Rate",
						String.format(
								"%.2f",
								(Double.parseDouble(operatingIncome1) * 100 / Double
										.parseDouble(operatingIncome2)) - 100)
								+ "%");
			}
			if ("-".equals(operatingIncome2) || "-".equals(operatingIncome3) || "0".equals(operatingIncome3)) {
				dataMap.put("operatingIncome2Rate", "-");
			} else {
				dataMap.put(
						"operatingIncome2Rate",
						String.format(
								"%.2f",
								(Double.parseDouble(operatingIncome2) * 100 / Double
										.parseDouble(operatingIncome3)) - 100)
								+ "%");
			}
			// 净利润
			String netProfit1 = map1.get("净利润") == null ? "-" : map1.get("净利润");
			String netProfit2 = map2.get("净利润") == null ? "-" : map2.get("净利润");
			String netProfit3 = map3.get("净利润") == null ? "-" : map3.get("净利润");
			dataMap.put("netProfit1", netProfit1);
			dataMap.put("netProfit2", netProfit2);
			dataMap.put("netProfit3", netProfit3);
			if ("-".equals(netProfit1) || "-".equals(netProfit2) || "0".equals(netProfit2)) {
				dataMap.put("netProfit1Rate", "-");
			} else {
				dataMap.put(
						"netProfit1Rate",
						String.format("%.2f",
								(Double.parseDouble(netProfit1) * 100 / Double
										.parseDouble(netProfit2)) - 100)
								+ "%");
			}
			if ("-".equals(netProfit2) || "-".equals(netProfit3) || "0".equals(netProfit3)) {
				dataMap.put("netProfit2Rate", "-");
			} else {
				dataMap.put(
						"netProfit2Rate",
						String.format("%.2f",
								(Double.parseDouble(netProfit2) * 100 / Double
										.parseDouble(netProfit3)) - 100)
								+ "%");
			}
			// 资产负债表
			dataMap.put("monetaryFund1",
					map1.get("货币资金") == null ? "-" : map1.get("货币资金"));
			dataMap.put("monetaryFund2",
					map2.get("货币资金") == null ? "-" : map2.get("货币资金"));
			dataMap.put("monetaryFund3",
					map3.get("货币资金") == null ? "-" : map3.get("货币资金"));

			dataMap.put("accountsReceivable1", map1.get("应收账款") == null ? "-"
					: map1.get("应收账款"));
			dataMap.put("accountsReceivable2", map2.get("应收账款") == null ? "-"
					: map2.get("应收账款"));
			dataMap.put("accountsReceivable3", map3.get("应收账款") == null ? "-"
					: map3.get("应收账款"));

			dataMap.put("otherReceivables1",
					map1.get("其他应收款") == null ? "-" : map1.get("其他应收款"));
			dataMap.put("otherReceivables2",
					map2.get("其他应收款") == null ? "-" : map2.get("其他应收款"));
			dataMap.put("otherReceivables3",
					map3.get("其他应收款") == null ? "-" : map3.get("其他应收款"));

			dataMap.put("inventory1", map1.get("存货") == null ? "-" : map1.get("存货"));
			dataMap.put("inventory2", map2.get("存货") == null ? "-" : map2.get("存货"));
			dataMap.put("inventory3", map3.get("存货") == null ? "-" : map3.get("存货"));

			dataMap.put("otherLiquidAssets1", map1.get("其他流动资产") == null ? "-"
					: map1.get("其他流动资产"));
			dataMap.put("otherLiquidAssets2", map2.get("其他流动资产") == null ? "-"
					: map2.get("其他流动资产"));
			dataMap.put("otherLiquidAssets3", map3.get("其他流动资产") == null ? "-"
					: map3.get("其他流动资产"));
			// 在重要财务数据中
			/*
			 * dataMap.put("liquidAssets1", map1.get("流动资产合计"));
			 * dataMap.put("liquidAssets2", map2.get("流动资产合计"));
			 * dataMap.put("liquidAssets3", map3.get("流动资产合计"));
			 */
			dataMap.put("fixedAssetsCostPrice1", map1.get("固定资产原价") == null ? "-"
					: map1.get("固定资产原价"));
			dataMap.put("fixedAssetsCostPrice2", map2.get("固定资产原价") == null ? "-"
					: map2.get("固定资产原价"));
			dataMap.put("fixedAssetsCostPrice3", map3.get("固定资产原价") == null ? "-"
					: map3.get("固定资产原价"));

			try {
				Double accumulatedDepreciation1 = Double.parseDouble(map1
						.get("固定资产原价")) - Double.parseDouble(map1.get("固定资产净值"));
				dataMap.put("accumulatedDepreciation1", accumulatedDepreciation1);// 累计折旧
			} catch (Exception e) {
				dataMap.put("accumulatedDepreciation1", "-");// 累计折旧
			}

			try {
				Double accumulatedDepreciation2 = Double.parseDouble(map2
						.get("固定资产原价")) - Double.parseDouble(map2.get("固定资产净值"));
				dataMap.put("accumulatedDepreciation2", accumulatedDepreciation2);// 累计折旧
			} catch (Exception e) {
				dataMap.put("accumulatedDepreciation2", "-");// 累计折旧
			}
			try {
				Double accumulatedDepreciation3 = Double.parseDouble(map3
						.get("固定资产原价")) - Double.parseDouble(map3.get("固定资产净值"));
				dataMap.put("accumulatedDepreciation3", accumulatedDepreciation3);
			} catch (Exception e) {
				dataMap.put("accumulatedDepreciation3", "-");// 累计折旧
			}

			// 在重要财务数据中固定资产合计
			/*
			 * dataMap.put("fixedAssets1", map1.get("固定资产原价"));//固定资产
			 * dataMap.put("fixedAssets2", map2.get("固定资产原价"));
			 * dataMap.put("fixedAssets3", map3.get("固定资产原价"));
			 */
			dataMap.put("intangibleAssets1",
					map1.get("无形资产") == null ? "-" : map1.get("无形资产"));// 无形资产合计
			dataMap.put("intangibleAssets2",
					map2.get("无形资产") == null ? "-" : map2.get("无形资产"));
			dataMap.put("intangibleAssets3",
					map3.get("无形资产") == null ? "-" : map3.get("无形资产"));

			try {
				Double otherAssets1 = Double.parseDouble(map1.get("资产总计"))
						- Double.parseDouble(map1.get("无形资产"))
						- Double.parseDouble(map1.get("固定资产净值"));
				dataMap.put("otherAssets1", otherAssets1);// 其它资产
			} catch (Exception e) {
				dataMap.put("otherAssets1", "-");// 其它资产
			}
			try {
				Double otherAssets2 = Double.parseDouble(map2.get("资产总计"))
						- Double.parseDouble(map2.get("无形资产"))
						- Double.parseDouble(map2.get("固定资产净值"));
				dataMap.put("otherAssets2", otherAssets2);// 其它资产
			} catch (Exception e) {
				dataMap.put("otherAssets2", "-");// 其它资产
			}
			try {
				Double otherAssets3 = Double.parseDouble(map3.get("资产总计"))
						- Double.parseDouble(map3.get("无形资产"))
						- Double.parseDouble(map3.get("固定资产净值"));
				dataMap.put("otherAssets3", otherAssets3);// 其它资产
			} catch (Exception e) {
				dataMap.put("otherAssets3", "-");// 其它资产
			}

			dataMap.put("longInvestment1",
					map1.get("长期股权投资") == null ? "-" : map1.get("长期股权投资"));// 总投资及其他资产
			dataMap.put("longInvestment2",
					map2.get("长期股权投资") == null ? "-" : map2.get("长期股权投资"));
			dataMap.put("longInvestment3",
					map3.get("长期股权投资") == null ? "-" : map3.get("长期股权投资"));
			// 在重要财务数据中资产综计
			/*
			 * dataMap.put("totalAssets1", map1.get("资产总计"));//资产总计
			 * dataMap.put("totalAssets2", map2.get("资产总计"));
			 * dataMap.put("totalAssets3", map3.get("资产总计"));
			 */
			dataMap.put("shortBorrowing1",
					map1.get("短期借款") == null ? "-" : map1.get("短期借款"));
			dataMap.put("shortBorrowing2",
					map2.get("短期借款") == null ? "-" : map2.get("短期借款"));
			dataMap.put("shortBorrowing3",
					map3.get("短期借款") == null ? "-" : map3.get("短期借款"));

			dataMap.put("accountsPayable1",
					map1.get("应付账款") == null ? "-" : map1.get("应付账款"));
			dataMap.put("accountsPayable2",
					map2.get("应付账款") == null ? "-" : map2.get("应付账款"));
			dataMap.put("accountsPayable3",
					map3.get("应付账款") == null ? "-" : map3.get("应付账款"));

			dataMap.put("otherPayables1",
					map1.get("其他应付款") == null ? "-" : map1.get("其他应付款"));
			dataMap.put("otherPayables2",
					map2.get("其他应付款") == null ? "-" : map2.get("其他应付款"));
			dataMap.put("otherPayables3",
					map3.get("其他应付款") == null ? "-" : map3.get("其他应付款"));

			dataMap.put("otherCurrentLiabilities1",
					map1.get("其他流动负债") == null ? "-" : map1.get("其他流动负债"));
			dataMap.put("otherCurrentLiabilities2",
					map2.get("其他流动负债") == null ? "-" : map2.get("其他流动负债"));
			dataMap.put("otherCurrentLiabilities3",
					map3.get("其他流动负债") == null ? "-" : map3.get("其他流动负债"));

			// 一年内到期的长期负债
			dataMap.put("shortTermDebt1",
					map1.get("其他流动负债") == null ? "-" : map1.get("其他流动负债"));// 一年内到期的非流动负债
			dataMap.put("shortTermDebt2",
					map2.get("其他流动负债") == null ? "-" : map2.get("其他流动负债"));
			dataMap.put("shortTermDebt3",
					map3.get("其他流动负债") == null ? "-" : map3.get("其他流动负债"));

			dataMap.put("totalCurrentLiabilities1",
					map1.get("流动负债合计") == null ? "-" : map1.get("流动负债合计"));
			dataMap.put("totalCurrentLiabilities2",
					map2.get("流动负债合计") == null ? "-" : map2.get("流动负债合计"));
			dataMap.put("totalCurrentLiabilities3",
					map3.get("流动负债合计") == null ? "-" : map3.get("流动负债合计"));

			// 长期负债
			dataMap.put("totalNoncurrentLiabilities1",
					map1.get("非流动负债合计") == null ? "-" : map1.get("非流动负债合计"));// 非流动负债合计
			dataMap.put("totalNoncurrentLiabilities2",
					map2.get("非流动负债合计") == null ? "-" : map2.get("非流动负债合计"));
			dataMap.put("totalNoncurrentLiabilities3",
					map3.get("非流动负债合计") == null ? "-" : map3.get("非流动负债合计"));

			/*
			 * //长期负债 dataMap.put("totalNoncurrentLiabilities1",
			 * map1.get("非流动负债合计"));//非流动负债合计
			 * dataMap.put("totalNoncurrentLiabilities2", map2.get("非流动负债合计"));
			 * dataMap.put("totalNoncurrentLiabilities3", map3.get("非流动负债合计"));
			 */

			dataMap.put("totalcurrentLiabilities1", map1.get("负债合计") == null ? "-"
					: map1.get("负债合计"));
			dataMap.put("totalcurrentLiabilities2", map2.get("负债合计") == null ? "-"
					: map2.get("负债合计"));
			dataMap.put("totalcurrentLiabilities3", map3.get("负债合计") == null ? "-"
					: map3.get("负债合计"));

			dataMap.put("capitalReserves1",
					map1.get("资本公积") == null ? "-" : map1.get("资本公积"));
			dataMap.put("capitalReserves2",
					map2.get("资本公积") == null ? "-" : map2.get("资本公积"));
			dataMap.put("capitalReserves3",
					map3.get("资本公积") == null ? "-" : map3.get("资本公积"));

			dataMap.put("surplusReserves1",
					map1.get("盈余公积") == null ? "-" : map1.get("盈余公积"));
			dataMap.put("surplusReserves2",
					map2.get("盈余公积") == null ? "-" : map2.get("盈余公积"));
			dataMap.put("surplusReserves3",
					map3.get("盈余公积") == null ? "-" : map3.get("盈余公积"));

			dataMap.put("undistributedProfit1", map1.get("未分配利润") == null ? "-"
					: map1.get("未分配利润"));
			dataMap.put("undistributedProfit2", map2.get("未分配利润") == null ? "-"
					: map2.get("未分配利润"));
			dataMap.put("undistributedProfit3", map3.get("未分配利润") == null ? "-"
					: map3.get("未分配利润"));
			// 在重要数据指标中
			/*
			 * dataMap.put("ownerEquity1", map1.get("股东权益合计"));
			 * dataMap.put("ownerEquity2", map2.get("股东权益合计"));
			 * dataMap.put("ownerEquity3", map3.get("股东权益合计"));
			 */
			// 利润表
			dataMap.put("operatingIncome1",
					map1.get("营业收入") == null ? "-" : map1.get("营业收入"));
			dataMap.put("operatingIncome2",
					map2.get("营业收入") == null ? "-" : map2.get("营业收入"));
			dataMap.put("operatingIncome3",
					map3.get("营业收入") == null ? "-" : map3.get("营业收入"));
			//
			dataMap.put("operatingCost1",
					map1.get("营业成本") == null ? "-" : map1.get("营业成本"));
			dataMap.put("operatingCost2",
					map2.get("营业成本") == null ? "-" : map2.get("营业成本"));
			dataMap.put("operatingCost3",
					map3.get("营业成本") == null ? "-" : map3.get("营业成本"));
			// 毛利润/亏损 税后利润/亏损 净利润/亏损
			dataMap.put("netProfit1",
					map1.get("净利润") == null ? "-" : map1.get("净利润"));
			dataMap.put("netProfit2",
					map2.get("净利润") == null ? "-" : map2.get("净利润"));
			dataMap.put("netProfit3",
					map3.get("净利润") == null ? "-" : map3.get("净利润"));

			dataMap.put("costOfSales1",
					map1.get("销售费用") == null ? "-" : map1.get("销售费用"));
			dataMap.put("costOfSales2",
					map2.get("销售费用") == null ? "-" : map2.get("销售费用"));
			dataMap.put("costOfSales3",
					map3.get("销售费用") == null ? "-" : map3.get("销售费用"));

			dataMap.put("managementFees1",
					map1.get("管理费用") == null ? "-" : map1.get("管理费用"));
			dataMap.put("managementFees2",
					map2.get("管理费用") == null ? "-" : map2.get("管理费用"));
			dataMap.put("managementFees3",
					map3.get("管理费用") == null ? "-" : map3.get("管理费用"));

			dataMap.put("financeCharges1",
					map1.get("财务费用") == null ? "-" : map1.get("财务费用"));
			dataMap.put("financeCharges2",
					map2.get("财务费用") == null ? "-" : map2.get("财务费用"));
			dataMap.put("financeCharges3",
					map3.get("财务费用") == null ? "-" : map3.get("财务费用"));
			// 营业利润/亏损 税前利润/亏损
			dataMap.put("profitTotal1",
					map1.get("利润总额") == null ? "-" : map1.get("利润总额"));
			dataMap.put("profitTotal2",
					map2.get("利润总额") == null ? "-" : map2.get("利润总额"));
			dataMap.put("profitTotal3",
					map3.get("利润总额") == null ? "-" : map3.get("利润总额"));

			dataMap.put("incomeTaxExpenses1", map1.get("所得税费用") == null ? "-"
					: map1.get("所得税费用"));
			dataMap.put("incomeTaxExpenses2", map2.get("所得税费用") == null ? "-"
					: map2.get("所得税费用"));
			dataMap.put("incomeTaxExpenses3", map3.get("所得税费用") == null ? "-"
					: map3.get("所得税费用"));

			// 流动比率
			try {
				Double currentRatio1 = Double.parseDouble(map1.get("流动资产合计"))
						/ Double.parseDouble(map1.get("流动负债合计"));
				dataMap.put("currentRatio1", String.format("%.2f", currentRatio1));
			} catch (Exception e) {
				dataMap.put("currentRatio1", "-");
			}
			try {
				Double currentRatio2 = Double.parseDouble(map2.get("流动资产合计"))
						/ Double.parseDouble(map2.get("流动负债合计"));
				dataMap.put("currentRatio2", String.format("%.2f", currentRatio2));
			} catch (Exception e) {
				dataMap.put("currentRatio2", "-");
			}
			try {
				Double currentRatio3 = Double.parseDouble(map3.get("流动资产合计"))
						/ Double.parseDouble(map3.get("流动负债合计"));
				dataMap.put("currentRatio3", String.format("%.2f", currentRatio3));
			} catch (Exception e) {
				dataMap.put("currentRatio3", "-");
			}

			// 速动比率
			try {
				Double quickRatio1 = (Double.parseDouble(map1.get("流动资产合计")) - Double
						.parseDouble(map1.get("存货")))
						/ Double.parseDouble(map1.get("流动负债合计"));
				dataMap.put("quickRatio1", String.format("%.2f", quickRatio1));
			} catch (Exception e) {
				dataMap.put("quickRatio1", "-");
			}
			try {
				Double quickRatio2 = (Double.parseDouble(map2.get("流动资产合计")) - Double
						.parseDouble(map2.get("存货")))
						/ Double.parseDouble(map2.get("流动负债合计"));
				dataMap.put("quickRatio2", String.format("%.2f", quickRatio2));
			} catch (Exception e) {
				dataMap.put("quickRatio2", "-");
			}
			try {
				Double quickRatio3 = (Double.parseDouble(map3.get("流动资产合计")) - Double
						.parseDouble(map3.get("存货")))
						/ Double.parseDouble(map3.get("流动负债合计"));
				dataMap.put("quickRatio3", String.format("%.2f", quickRatio3));
			} catch (Exception e) {
				dataMap.put("quickRatio3", "-");
			}
			// 负债权益比率
			try {
				Double debtequityRatio1 = Double.parseDouble(map1.get("负债合计"))
						/ Double.parseDouble(map1.get("股东权益合计"));
				dataMap.put("debtequityRatio1",
						String.format("%.2f", debtequityRatio1));
			} catch (Exception e) {
				dataMap.put("debtequityRatio1", "-");
			}
			try {
				Double debtequityRatio2 = Double.parseDouble(map2.get("负债合计"))
						/ Double.parseDouble(map2.get("股东权益合计"));
				dataMap.put("debtequityRatio2",
						String.format("%.2f", debtequityRatio2));
			} catch (Exception e) {
				dataMap.put("debtequityRatio2", "-");
			}
			try {
				Double debtequityRatio3 = Double.parseDouble(map3.get("负债合计"))
						/ Double.parseDouble(map3.get("股东权益合计"));
				dataMap.put("debtequityRatio3",
						String.format("%.2f", debtequityRatio3));
			} catch (Exception e) {
				dataMap.put("debtequityRatio3", "-");
			}
			// 资产负债率
			try {
				Double assetliabilityRatio1 = Double.parseDouble(map1.get("负债合计"))
						/ Double.parseDouble(map1.get("资产总计"));
				dataMap.put("assetliabilityRatio1",
						String.format("%.2f", assetliabilityRatio1));
			} catch (Exception e) {
				dataMap.put("assetliabilityRatio1", "-");
			}
			try {
				Double assetliabilityRatio2 = Double.parseDouble(map2.get("负债合计"))
						/ Double.parseDouble(map2.get("资产总计"));
				dataMap.put("assetliabilityRatio2",
						String.format("%.2f", assetliabilityRatio2));
			} catch (Exception e) {
				dataMap.put("assetliabilityRatio2", "-");
			}
			try {
				Double assetliabilityRatio3 = Double.parseDouble(map3.get("负债合计"))
						/ Double.parseDouble(map3.get("资产总计"));
				dataMap.put("assetliabilityRatio3",
						String.format("%.2f", assetliabilityRatio3));
			} catch (Exception e) {
				dataMap.put("assetliabilityRatio3", "-");
			}
			// 应收账款回收周期cycleDate
			try {
				Double cycleDate1 = Double.parseDouble(map1.get("应收账款"))
						/ Double.parseDouble(map1.get("营业收入")) * 365;
				dataMap.put("cycleDate1", String.format("%.2f", cycleDate1));
			} catch (Exception e) {
				dataMap.put("cycleDate1", "-");
			}
			try {
				Double cycleDate2 = Double.parseDouble(map2.get("应收账款"))
						/ Double.parseDouble(map2.get("营业收入")) * 365;
				dataMap.put("cycleDate2", String.format("%.2f", cycleDate2));
			} catch (Exception e) {
				dataMap.put("cycleDate2", "-");
			}
			try {
				Double cycleDate3 = Double.parseDouble(map3.get("应收账款"))
						/ Double.parseDouble(map3.get("营业收入")) * 365;
				dataMap.put("cycleDate3", String.format("%.2f", cycleDate3));
			} catch (Exception e) {
				dataMap.put("cycleDate3", "-");
			}
			// 存货周转期
			try {
				Double inventoryProcessingPeriod1 = 365 / (Double.parseDouble(map1
						.get("营业成本")) / Double.parseDouble(map1.get("存货")));
				dataMap.put("inventoryProcessingPeriod1",
						inventoryProcessingPeriod1);
			} catch (Exception e) {
				dataMap.put("inventoryProcessingPeriod1", "-");
			}
			try {
				Double inventoryProcessingPeriod2 = 365 / (Double.parseDouble(map2
						.get("营业成本")) / Double.parseDouble(map2.get("存货")));
				dataMap.put("inventoryProcessingPeriod2",
						inventoryProcessingPeriod2);
			} catch (Exception e) {
				dataMap.put("inventoryProcessingPeriod2", "-");
			}
			try {
				Double inventoryProcessingPeriod3 = 365 / (Double.parseDouble(map3
						.get("营业成本")) / Double.parseDouble(map3.get("存货")));
				dataMap.put("inventoryProcessingPeriod3",
						inventoryProcessingPeriod3);
			} catch (Exception e) {
				dataMap.put("inventoryProcessingPeriod3", "-");
			}
			// 资产周转率
			try {
				Double assetTurnover1 = Double.parseDouble(map1.get("营业收入"))
						/ Double.parseDouble(map1.get("资产总计"));
				dataMap.put("assetTurnover1", String.format("%.2f", assetTurnover1));
			} catch (Exception e) {
				dataMap.put("assetTurnover1", "-");
			}
			try {
				Double assetTurnover2 = Double.parseDouble(map2.get("营业收入"))
						/ Double.parseDouble(map2.get("资产总计"));
				dataMap.put("assetTurnover2", String.format("%.2f", assetTurnover2));
			} catch (Exception e) {
				dataMap.put("assetTurnover2", "-");
			}
			try {
				Double assetTurnover3 = Double.parseDouble(map3.get("营业收入"))
						/ Double.parseDouble(map3.get("资产总计"));
				dataMap.put("assetTurnover3", String.format("%.2f", assetTurnover3));
			} catch (Exception e) {
				dataMap.put("assetTurnover3", "-");
			}
			// 毛利润率
			try {
				Double grossProfitMargin1 = (Double.parseDouble(map1.get("营业收入")) - Double
						.parseDouble(map1.get("营业成本")))
						/ Double.parseDouble(map1.get("营业收入"));
				dataMap.put("grossProfitMargin1",
						String.format("%.2f", grossProfitMargin1));
			} catch (Exception e) {
				dataMap.put("grossProfitMargin1", "-");
			}
			try {
				Double grossProfitMargin2 = (Double.parseDouble(map2.get("营业收入")) - Double
						.parseDouble(map2.get("营业成本")))
						/ Double.parseDouble(map2.get("营业收入"));
				dataMap.put("grossProfitMargin2",
						String.format("%.2f", grossProfitMargin2));
			} catch (Exception e) {
				dataMap.put("grossProfitMargin2", "-");
			}
			try {
				Double grossProfitMargin3 = (Double.parseDouble(map3.get("营业收入")) - Double
						.parseDouble(map3.get("营业成本")))
						/ Double.parseDouble(map3.get("营业收入"));
				dataMap.put("grossProfitMargin3",
						String.format("%.2f", grossProfitMargin3));
			} catch (Exception e) {
				dataMap.put("grossProfitMargin3", "-");
			}
			// 净利润率
			try {
				Double netProfitMargin1 = Double.parseDouble(map1.get("净利润"))
						/ Double.parseDouble(map1.get("营业收入"));
				dataMap.put("netProfitMargin1",
						String.format("%.2f", netProfitMargin1));
			} catch (Exception e) {
				dataMap.put("netProfitMargin1", "-");
			}
			try {
				Double netProfitMargin2 = Double.parseDouble(map2.get("净利润"))
						/ Double.parseDouble(map2.get("营业收入"));
				dataMap.put("netProfitMargin2",
						String.format("%.2f", netProfitMargin2));
			} catch (Exception e) {
				dataMap.put("netProfitMargin2", "-");
			}
			try {
				Double netProfitMargin3 = Double.parseDouble(map3.get("净利润"))
						/ Double.parseDouble(map3.get("营业收入"));
				dataMap.put("netProfitMargin3",
						String.format("%.2f", netProfitMargin3));
			} catch (Exception e) {
				dataMap.put("netProfitMargin3", "-");
			}
			// 股东权益收益率
			try {
				Double shareholdersEquity1 = Double.parseDouble(map1.get("净利润"))
						/ Double.parseDouble(map1.get("股东权益合计"));
				dataMap.put("shareholdersEquity1",
						String.format("%.2f", shareholdersEquity1));
			} catch (Exception e) {
				dataMap.put("shareholdersEquity1", "-");
			}
			try {
				Double shareholdersEquity2 = Double.parseDouble(map2.get("净利润"))
						/ Double.parseDouble(map2.get("股东权益合计"));
				dataMap.put("shareholdersEquity2",
						String.format("%.2f", shareholdersEquity2));
			} catch (Exception e) {
				dataMap.put("shareholdersEquity2", "-");
			}
			try {
				Double shareholdersEquity3 = Double.parseDouble(map3.get("净利润"))
						/ Double.parseDouble(map3.get("股东权益合计"));
				dataMap.put("shareholdersEquity3",
						String.format("%.2f", shareholdersEquity3));
			} catch (Exception e) {
				dataMap.put("shareholdersEquity3", "-");
			}
			// 资产收益率
			try {
				Double assetEarningRate1 = Double.parseDouble(map1.get("净利润"))
						* 2
						/ (Double.parseDouble(map1.get("资产总计")) + Double
								.parseDouble(map1.get("资产总计")));
				dataMap.put("assetEarningRate1",
						String.format("%.2f", assetEarningRate1));
			} catch (Exception e) {
				dataMap.put("assetEarningRate1", "-");
			}
			try {
				Double assetEarningRate2 = Double.parseDouble(map2.get("净利润"))
						* 2
						/ (Double.parseDouble(map2.get("资产总计")) + Double
								.parseDouble(map2.get("资产总计")));
				dataMap.put("assetEarningRate2",
						String.format("%.2f", assetEarningRate2));
			} catch (Exception e) {
				dataMap.put("assetEarningRate2", "-");
			}
			try {
				Double assetEarningRate3 = Double.parseDouble(map3.get("净利润"))
						* 2
						/ (Double.parseDouble(map3.get("资产总计")) + Double
								.parseDouble(map3.get("资产总计")));
				dataMap.put("assetEarningRate3",
						String.format("%.2f", assetEarningRate3));
			} catch (Exception e) {
				dataMap.put("assetEarningRate3", "-");
			}
			}
			return dataMap;
		}
		
		/**
		 * @title 导出图片
		 * @author  孙尚飞  2017-8-23
		 * @desc
		 */
		@Permission(model = "reportTemplate", privilegeValue = "report")
		@RequestMapping("/finalImage")
		@ResponseBody
		public Map<String, Object> finalImage(String entID) {
			List<FinalcialImageVo> finalcialImageVos = new ArrayList<FinalcialImageVo>();
			List<FinalRateImageVo> finalRateImageVos = new ArrayList<FinalRateImageVo>();
			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
			String strs = "";
			list = financeService.reportFinalData(entID);
			Map<String, String> map1 = new HashMap<String, String>();
			Map<String, String> map2 = new HashMap<String, String>();
			Map<String, String> map3 = new HashMap<String, String>();
			if (list.size() > 2) {
				map1 = list.get(0);
				map2 = list.get(1);
				map3 = list.get(2);
				strs = map1.get("年份")+","+map2.get("年份")+","+map3.get("年份");
				FinalcialImageVo finalcialImageVo1 = new FinalcialImageVo();
				finalcialImageVo1.setName("流动资产");
				finalcialImageVo1.setValue1(map1.get("流动资产合计") == null ? "0" : map1
						.get("流动资产合计"));
				finalcialImageVo1.setValue2(map2.get("流动资产合计") == null ? "0" : map2
						.get("流动资产合计"));
				finalcialImageVo1.setValue3(map3.get("流动资产合计") == null ? "0" : map3
						.get("流动资产合计"));
				finalcialImageVos.add(finalcialImageVo1);

				FinalcialImageVo finalcialImageVo2 = new FinalcialImageVo();
				finalcialImageVo2.setName("流动负债");
				finalcialImageVo2.setValue1(map1.get("流动负债合计") == null ? "0" : map1
						.get("流动负债合计"));
				finalcialImageVo2.setValue2(map2.get("流动负债合计") == null ? "0" : map2
						.get("流动负债合计"));
				finalcialImageVo2.setValue3(map3.get("流动负债合计") == null ? "0" : map3
						.get("流动负债合计"));
				finalcialImageVos.add(finalcialImageVo2);

				FinalcialImageVo finalcialImageVo3 = new FinalcialImageVo();
				finalcialImageVo3.setName("营运资本");
				try {
					Double workingCapital1 = Double.parseDouble(map1.get("流动资产合计"))
							- Double.parseDouble(map1.get("流动负债合计"));
					finalcialImageVo3.setValue1(workingCapital1 + "");
				} catch (Exception e) {
					finalcialImageVo3.setValue1("0");
				}
				try {
					Double workingCapital2 = Double.parseDouble(map2.get("流动资产合计"))
							- Double.parseDouble(map2.get("流动负债合计"));
					finalcialImageVo3.setValue1(workingCapital2 + "");
				} catch (Exception e) {
					finalcialImageVo3.setValue2("0");
				}
				try {
					Double workingCapital3 = Double.parseDouble(map3.get("流动资产合计"))
							- Double.parseDouble(map3.get("流动负债合计"));
					finalcialImageVo3.setValue3(workingCapital3 + "");
				} catch (Exception e) {
					finalcialImageVo3.setValue3("0");
				}
				finalcialImageVos.add(finalcialImageVo3);

				FinalcialImageVo finalcialImageVo4 = new FinalcialImageVo();
				finalcialImageVo4.setName("有形净值");
				try {
					Double tangibleNetWorth1 = Double.parseDouble(map1.get("资产总计"))
							- Double.parseDouble(map1.get("无形资产"));
					finalcialImageVo4.setValue1(tangibleNetWorth1 + "");
				} catch (Exception e) {
					finalcialImageVo4.setValue1("0");
				}
				try {
					Double tangibleNetWorth2 = Double.parseDouble(map2.get("资产总计"))
							- Double.parseDouble(map2.get("无形资产"));
					finalcialImageVo4.setValue2(tangibleNetWorth2 + "");
				} catch (Exception e) {
					finalcialImageVo4.setValue2("0");
				}
				try {
					Double tangibleNetWorth3 = Double.parseDouble(map3.get("资产总计"))
							- Double.parseDouble(map3.get("无形资产"));
					finalcialImageVo4.setValue3(tangibleNetWorth3 + "");
				} catch (Exception e) {
					finalcialImageVo4.setValue3("0");
				}
				finalcialImageVos.add(finalcialImageVo4);

				FinalcialImageVo finalcialImageVo5 = new FinalcialImageVo();
				finalcialImageVo5.setName("固定资产");
				finalcialImageVo5.setValue1(map1.get("固定资产原价") == null ? "0" : map1
						.get("固定资产原价"));
				finalcialImageVo5.setValue2(map2.get("固定资产原价") == null ? "0" : map2
						.get("固定资产原价"));
				finalcialImageVo5.setValue3(map3.get("固定资产原价") == null ? "0" : map3
						.get("固定资产原价"));
				finalcialImageVos.add(finalcialImageVo5);

				FinalcialImageVo finalcialImageVo6 = new FinalcialImageVo();
				finalcialImageVo6.setName("总资产");
				finalcialImageVo6.setValue1(map1.get("资产总计") == null ? "0" : map1
						.get("资产总计"));
				finalcialImageVo6.setValue2(map2.get("资产总计") == null ? "0" : map2
						.get("资产总计"));
				finalcialImageVo6.setValue3(map3.get("资产总计") == null ? "0" : map3
						.get("资产总计"));
				finalcialImageVos.add(finalcialImageVo6);

				FinalcialImageVo finalcialImageVo7 = new FinalcialImageVo();
				finalcialImageVo7.setName("总负债");
				finalcialImageVo7.setValue1(map1.get("负债合计") == null ? "0" : map1
						.get("负债合计"));
				finalcialImageVo7.setValue2(map2.get("负债合计") == null ? "0" : map2
						.get("负债合计"));
				finalcialImageVo7.setValue3(map3.get("负债合计") == null ? "0" : map3
						.get("负债合计"));
				finalcialImageVos.add(finalcialImageVo7);

				FinalcialImageVo finalcialImageVo8 = new FinalcialImageVo();
				finalcialImageVo8.setName("总负债");
				finalcialImageVo8.setValue1(map1.get("股东权益合计") == null ? "0" : map1
						.get("股东权益合计"));
				finalcialImageVo8.setValue2(map2.get("股东权益合计") == null ? "0" : map2
						.get("股东权益合计"));
				finalcialImageVo8.setValue3(map3.get("股东权益合计") == null ? "0" : map3
						.get("股东权益合计"));
				finalcialImageVos.add(finalcialImageVo8);

				FinalcialImageVo finalcialImageVo9 = new FinalcialImageVo();
				finalcialImageVo9.setName("营业收入");
				finalcialImageVo9.setValue1(map1.get("营业收入") == null ? "0" : map1
						.get("营业收入"));
				finalcialImageVo9.setValue2(map2.get("营业收入") == null ? "0" : map2
						.get("营业收入"));
				finalcialImageVo9.setValue3(map3.get("营业收入") == null ? "0" : map3
						.get("营业收入"));
				finalcialImageVos.add(finalcialImageVo9);

				FinalcialImageVo finalcialImageVo10 = new FinalcialImageVo();
				finalcialImageVo10.setName("净利润");
				finalcialImageVo10.setValue1(map1.get("净利润") == null ? "0" : map1
						.get("净利润"));
				finalcialImageVo10.setValue2(map2.get("净利润") == null ? "0" : map2
						.get("净利润"));
				finalcialImageVo10.setValue3(map3.get("净利润") == null ? "0" : map3
						.get("净利润"));
				finalcialImageVos.add(finalcialImageVo10);

				FinalRateImageVo finalRateImageVo1 = new FinalRateImageVo();
				finalRateImageVo1.setName("流动比率");
				try {
					Double currentRatio1 = Double.parseDouble(map1.get("流动资产合计"))
							/ Double.parseDouble(map1.get("流动负债合计"));
					finalRateImageVo1.setValue1(currentRatio1 + "");
				} catch (Exception e) {
					finalRateImageVo1.setValue1("0");
				}
				try {
					Double currentRatio2 = Double.parseDouble(map2.get("流动资产合计"))
							/ Double.parseDouble(map2.get("流动负债合计"));
					finalRateImageVo1.setValue2(currentRatio2 + "");
				} catch (Exception e) {
					finalRateImageVo1.setValue2("0");
				}
				try {
					Double currentRatio3 = Double.parseDouble(map3.get("流动资产合计"))
							/ Double.parseDouble(map3.get("流动负债合计"));
					finalRateImageVo1.setValue3(currentRatio3 + "");
				} catch (Exception e) {
					finalRateImageVo1.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo1);

				FinalRateImageVo finalRateImageVo2 = new FinalRateImageVo();
				finalRateImageVo2.setName("速动比率");
				//
				try {
					Double quickRatio1 = (Double.parseDouble(map1.get("流动资产合计")) - Double
							.parseDouble(map1.get("存货")))
							/ Double.parseDouble(map1.get("流动负债合计"));
					finalRateImageVo2.setValue1(quickRatio1 + "");
				} catch (Exception e) {
					finalRateImageVo2.setValue1("0");
				}
				try {
					Double quickRatio2 = (Double.parseDouble(map2.get("流动资产合计")) - Double
							.parseDouble(map2.get("存货")))
							/ Double.parseDouble(map2.get("流动负债合计"));
					finalRateImageVo2.setValue1(quickRatio2 + "");
				} catch (Exception e) {
					finalRateImageVo2.setValue2("0");
				}
				try {
					Double quickRatio3 = (Double.parseDouble(map3.get("流动资产合计")) - Double
							.parseDouble(map3.get("存货")))
							/ Double.parseDouble(map3.get("流动负债合计"));
					finalRateImageVo2.setValue3(quickRatio3 + "");
				} catch (Exception e) {
					finalRateImageVo2.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo2);

				FinalRateImageVo finalRateImageVo3 = new FinalRateImageVo();
				finalRateImageVo3.setName("负债权益比率");
				try {
					Double debtequityRatio1 = Double.parseDouble(map1.get("负债合计"))
							/ Double.parseDouble(map1.get("股东权益合计"));
					finalRateImageVo3.setValue1(debtequityRatio1 + "");
				} catch (Exception e) {
					finalRateImageVo3.setValue1("0");
				}
				try {
					Double debtequityRatio2 = Double.parseDouble(map2.get("负债合计"))
							/ Double.parseDouble(map2.get("股东权益合计"));
					finalRateImageVo3.setValue2(debtequityRatio2 + "");
				} catch (Exception e) {
					finalRateImageVo3.setValue2("0");
				}
				try {
					Double debtequityRatio3 = Double.parseDouble(map3.get("负债合计"))
							/ Double.parseDouble(map3.get("股东权益合计"));
					finalRateImageVo3.setValue3(debtequityRatio3 + "");
				} catch (Exception e) {
					finalRateImageVo3.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo3);

				FinalRateImageVo finalRateImageVo4 = new FinalRateImageVo();
				finalRateImageVo4.setName("负债权益比率");
				try {
					Double assetliabilityRatio1 = Double.parseDouble(map1
							.get("负债合计")) / Double.parseDouble(map1.get("资产总计"));
					finalRateImageVo4.setValue1(assetliabilityRatio1 + "");
				} catch (Exception e) {
					finalRateImageVo4.setValue1("0");
				}
				try {
					Double assetliabilityRatio2 = Double.parseDouble(map2
							.get("负债合计")) / Double.parseDouble(map2.get("资产总计"));
					finalRateImageVo4.setValue2(assetliabilityRatio2 + "");
				} catch (Exception e) {
					finalRateImageVo4.setValue2("0");
				}
				try {
					Double assetliabilityRatio3 = Double.parseDouble(map3
							.get("负债合计")) / Double.parseDouble(map3.get("资产总计"));
					finalRateImageVo4.setValue3(assetliabilityRatio3 + "");
				} catch (Exception e) {
					finalRateImageVo4.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo4);

				FinalRateImageVo finalRateImageVo5 = new FinalRateImageVo();
				finalRateImageVo5.setName("资产周转率");
				try {
					Double assetTurnover1 = Double.parseDouble(map1.get("营业收入"))
							/ Double.parseDouble(map1.get("资产总计"));
					finalRateImageVo5.setValue1(assetTurnover1 + "");
				} catch (Exception e) {
					finalRateImageVo5.setValue1("0");
				}
				try {
					Double assetTurnover2 = Double.parseDouble(map2.get("营业收入"))
							/ Double.parseDouble(map2.get("资产总计"));
					finalRateImageVo5.setValue1(assetTurnover2 + "");
				} catch (Exception e) {
					finalRateImageVo5.setValue2("0");
				}
				try {
					Double assetTurnover3 = Double.parseDouble(map3.get("营业收入"))
							/ Double.parseDouble(map3.get("资产总计"));
					finalRateImageVo5.setValue1(assetTurnover3 + "");
				} catch (Exception e) {
					finalRateImageVo5.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo5);

				FinalRateImageVo finalRateImageVo6 = new FinalRateImageVo();
				finalRateImageVo6.setName("毛利润率");
				try {
					Double grossProfitMargin1 = (Double.parseDouble(map1
							.get("营业收入")) - Double.parseDouble(map1.get("营业成本")))
							/ Double.parseDouble(map1.get("营业收入"));
					finalRateImageVo6.setValue1(grossProfitMargin1 + "");
				} catch (Exception e) {
					finalRateImageVo6.setValue1("0");
				}
				try {
					Double grossProfitMargin2 = (Double.parseDouble(map2
							.get("营业收入")) - Double.parseDouble(map2.get("营业成本")))
							/ Double.parseDouble(map2.get("营业收入"));
					finalRateImageVo6.setValue2(grossProfitMargin2 + "");
				} catch (Exception e) {
					finalRateImageVo6.setValue2("0");
				}
				try {
					Double grossProfitMargin3 = (Double.parseDouble(map3
							.get("营业收入")) - Double.parseDouble(map3.get("营业成本")))
							/ Double.parseDouble(map3.get("营业收入"));
					finalRateImageVo6.setValue3(grossProfitMargin3 + "");
				} catch (Exception e) {
					finalRateImageVo6.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo6);

				FinalRateImageVo finalRateImageVo7 = new FinalRateImageVo();
				finalRateImageVo7.setName("净利润率");
				try {
					Double netProfitMargin1 = Double.parseDouble(map1.get("净利润"))
							/ Double.parseDouble(map1.get("营业收入"));
					finalRateImageVo7.setValue1(netProfitMargin1 + "");
				} catch (Exception e) {
					finalRateImageVo7.setValue1("0");
				}
				try {
					Double netProfitMargin2 = Double.parseDouble(map2.get("净利润"))
							/ Double.parseDouble(map2.get("营业收入"));
					finalRateImageVo7.setValue2(netProfitMargin2 + "");
				} catch (Exception e) {
					finalRateImageVo7.setValue2("0");
				}
				try {
					Double netProfitMargin3 = Double.parseDouble(map3.get("净利润"))
							/ Double.parseDouble(map3.get("营业收入"));
					finalRateImageVo7.setValue3(netProfitMargin3 + "");
				} catch (Exception e) {
					finalRateImageVo7.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo7);

				FinalRateImageVo finalRateImageVo8 = new FinalRateImageVo();
				finalRateImageVo8.setName("股东权益收益率");
				try {
					Double shareholdersEquity1 = Double
							.parseDouble(map1.get("净利润"))
							/ Double.parseDouble(map1.get("股东权益合计"));
					finalRateImageVo8.setValue1(shareholdersEquity1 + "");
				} catch (Exception e) {
					finalRateImageVo8.setValue1("0");
				}
				try {
					Double shareholdersEquity2 = Double
							.parseDouble(map2.get("净利润"))
							/ Double.parseDouble(map2.get("股东权益合计"));
					finalRateImageVo8.setValue2(shareholdersEquity2 + "");
				} catch (Exception e) {
					finalRateImageVo8.setValue2("0");
				}
				try {
					Double shareholdersEquity3 = Double
							.parseDouble(map3.get("净利润"))
							/ Double.parseDouble(map3.get("股东权益合计"));
					finalRateImageVo8.setValue3(shareholdersEquity3 + "");
				} catch (Exception e) {
					finalRateImageVo8.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo8);

				FinalRateImageVo finalRateImageVo9 = new FinalRateImageVo();
				finalRateImageVo9.setName("资产收益率");
				try {
					Double assetEarningRate1 = Double.parseDouble(map1.get("净利润"))
							* 2
							/ (Double.parseDouble(map1.get("资产总计")) + Double
									.parseDouble(map1.get("资产总计")));
					finalRateImageVo9.setValue1(assetEarningRate1 + "");
				} catch (Exception e) {
					finalRateImageVo9.setValue1("0");
				}
				try {
					Double assetEarningRate2 = Double.parseDouble(map2.get("净利润"))
							* 2
							/ (Double.parseDouble(map2.get("资产总计")) + Double
									.parseDouble(map2.get("资产总计")));
					finalRateImageVo9.setValue1(assetEarningRate2 + "");
				} catch (Exception e) {
					finalRateImageVo9.setValue2("0");
				}
				try {
					Double assetEarningRate3 = Double.parseDouble(map3.get("净利润"))
							* 2
							/ (Double.parseDouble(map3.get("资产总计")) + Double
									.parseDouble(map3.get("资产总计")));
					finalRateImageVo9.setValue3(assetEarningRate3 + "");
				} catch (Exception e) {
					finalRateImageVo9.setValue3("0");
				}
				finalRateImageVos.add(finalRateImageVo9);
			}

			Map<String, Object> msgMap = new HashMap<String, Object>();
			msgMap.put("finalcialImageVos", finalcialImageVos);
			msgMap.put("finalRateImageVos", finalRateImageVos);
			if(strs!=null&&!strs.equals("")){
				msgMap.put("listNames", strs.split(","));
			}else{
				msgMap.put("listNames", "");
			}
			msgMap.put("success", true);
			msgMap.put("status", true);
			return msgMap;
		}
		/**
		 * @title 下载图片
		 * @author  孙尚飞  2017-8-23
		 * @desc
		 */
		@Permission(model = "reportTemplate", privilegeValue = "report")
		@RequestMapping("/downFinalImage")
		@ResponseBody
		public String downFinalImage(HttpServletRequest request,HttpServletResponse response) {
			String svgCode=request.getParameter("svgCode");
			String entID=request.getParameter("entID");
			String svg[] = svgCode.split("_");
			String path[] = new String[svg.length];
			OutputStream out = null;
			try {
				out = response.getOutputStream();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			List<String> imageList = new ArrayList<String>();
			if (svg != null) {
				for (int k = 0; k < svg.length; k++) {
					String picName = entID + (k + 1) + ".png";
					path[k] = BusinessUtil.getMsg("adr")+BusinessUtil.getMsg("root")+BusinessUtil.getMsg("financeImage")+entID+File.separator+picName;
					imageList.add(path[k]);
					try {
						convertToPng(svg[k], path[k]);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (TranscoderException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			try {
				out.flush();
				out.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
		/**
		 * @Description: 将svg字符串转换为png
		 * @Author:
		 * @param svgCode
		 *            svg代码
		 * @param pngFilePath
		 *            保存的路径
		 * @throws IOException
		 *             io异常
		 * @throws TranscoderException
		 *             svg代码异常
		 */
		private void convertToPng(String svgCode, String pngFilePath)
				throws IOException, TranscoderException {
			File file = new File(pngFilePath);
			FileOutputStream outputStream = null;
			try {
				if (!file.getParentFile().exists()) {
					if (!file.getParentFile().mkdirs()) {
					}
				}
				file.createNewFile();
				outputStream = new FileOutputStream(file);
				convertToPng(svgCode, outputStream);
			} finally {
				if (outputStream != null) {
					try {
						outputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}

		/**
		 * @Description: 将svgCode转换成png文件，直接输出到流中
		 * @param svgCode
		 *            svg代码
		 * @param outputStream
		 *            输出流
		 * @throws TranscoderException
		 *             异常
		 * @throws IOException
		 *             io异常
		 */
		public static void convertToPng(String svgCode, OutputStream outputStream)
				throws TranscoderException, IOException {
			try {
				byte[] bytes = svgCode.getBytes("UTF-8");
				PNGTranscoder t = new PNGTranscoder();
				TranscoderInput input = new TranscoderInput(
						new ByteArrayInputStream(bytes));
				TranscoderOutput output = new TranscoderOutput(outputStream);
				t.transcode(input, output);
				outputStream.flush();
			} finally {
				if (outputStream != null) {
					try {
						outputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
		
}
